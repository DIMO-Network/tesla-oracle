// Code generated by SQLBoiler 4.18.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/sqlboiler/v4/types"
	"github.com/volatiletech/strmangle"
)

// RiverClientQueue is an object representing the database table.
type RiverClientQueue struct {
	RiverClientID    string     `boil:"river_client_id" json:"river_client_id" toml:"river_client_id" yaml:"river_client_id"`
	Name             string     `boil:"name" json:"name" toml:"name" yaml:"name"`
	CreatedAt        time.Time  `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	MaxWorkers       int64      `boil:"max_workers" json:"max_workers" toml:"max_workers" yaml:"max_workers"`
	Metadata         types.JSON `boil:"metadata" json:"metadata" toml:"metadata" yaml:"metadata"`
	NumJobsCompleted int64      `boil:"num_jobs_completed" json:"num_jobs_completed" toml:"num_jobs_completed" yaml:"num_jobs_completed"`
	NumJobsRunning   int64      `boil:"num_jobs_running" json:"num_jobs_running" toml:"num_jobs_running" yaml:"num_jobs_running"`
	UpdatedAt        time.Time  `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`

	R *riverClientQueueR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L riverClientQueueL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var RiverClientQueueColumns = struct {
	RiverClientID    string
	Name             string
	CreatedAt        string
	MaxWorkers       string
	Metadata         string
	NumJobsCompleted string
	NumJobsRunning   string
	UpdatedAt        string
}{
	RiverClientID:    "river_client_id",
	Name:             "name",
	CreatedAt:        "created_at",
	MaxWorkers:       "max_workers",
	Metadata:         "metadata",
	NumJobsCompleted: "num_jobs_completed",
	NumJobsRunning:   "num_jobs_running",
	UpdatedAt:        "updated_at",
}

var RiverClientQueueTableColumns = struct {
	RiverClientID    string
	Name             string
	CreatedAt        string
	MaxWorkers       string
	Metadata         string
	NumJobsCompleted string
	NumJobsRunning   string
	UpdatedAt        string
}{
	RiverClientID:    "river_client_queue.river_client_id",
	Name:             "river_client_queue.name",
	CreatedAt:        "river_client_queue.created_at",
	MaxWorkers:       "river_client_queue.max_workers",
	Metadata:         "river_client_queue.metadata",
	NumJobsCompleted: "river_client_queue.num_jobs_completed",
	NumJobsRunning:   "river_client_queue.num_jobs_running",
	UpdatedAt:        "river_client_queue.updated_at",
}

// Generated where

type whereHelperint64 struct{ field string }

func (w whereHelperint64) EQ(x int64) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperint64) NEQ(x int64) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperint64) LT(x int64) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperint64) LTE(x int64) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperint64) GT(x int64) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperint64) GTE(x int64) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }
func (w whereHelperint64) IN(slice []int64) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelperint64) NIN(slice []int64) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

var RiverClientQueueWhere = struct {
	RiverClientID    whereHelperstring
	Name             whereHelperstring
	CreatedAt        whereHelpertime_Time
	MaxWorkers       whereHelperint64
	Metadata         whereHelpertypes_JSON
	NumJobsCompleted whereHelperint64
	NumJobsRunning   whereHelperint64
	UpdatedAt        whereHelpertime_Time
}{
	RiverClientID:    whereHelperstring{field: "\"tesla_oracle\".\"river_client_queue\".\"river_client_id\""},
	Name:             whereHelperstring{field: "\"tesla_oracle\".\"river_client_queue\".\"name\""},
	CreatedAt:        whereHelpertime_Time{field: "\"tesla_oracle\".\"river_client_queue\".\"created_at\""},
	MaxWorkers:       whereHelperint64{field: "\"tesla_oracle\".\"river_client_queue\".\"max_workers\""},
	Metadata:         whereHelpertypes_JSON{field: "\"tesla_oracle\".\"river_client_queue\".\"metadata\""},
	NumJobsCompleted: whereHelperint64{field: "\"tesla_oracle\".\"river_client_queue\".\"num_jobs_completed\""},
	NumJobsRunning:   whereHelperint64{field: "\"tesla_oracle\".\"river_client_queue\".\"num_jobs_running\""},
	UpdatedAt:        whereHelpertime_Time{field: "\"tesla_oracle\".\"river_client_queue\".\"updated_at\""},
}

// RiverClientQueueRels is where relationship names are stored.
var RiverClientQueueRels = struct {
	RiverClient string
}{
	RiverClient: "RiverClient",
}

// riverClientQueueR is where relationships are stored.
type riverClientQueueR struct {
	RiverClient *RiverClient `boil:"RiverClient" json:"RiverClient" toml:"RiverClient" yaml:"RiverClient"`
}

// NewStruct creates a new relationship struct
func (*riverClientQueueR) NewStruct() *riverClientQueueR {
	return &riverClientQueueR{}
}

func (r *riverClientQueueR) GetRiverClient() *RiverClient {
	if r == nil {
		return nil
	}
	return r.RiverClient
}

// riverClientQueueL is where Load methods for each relationship are stored.
type riverClientQueueL struct{}

var (
	riverClientQueueAllColumns            = []string{"river_client_id", "name", "created_at", "max_workers", "metadata", "num_jobs_completed", "num_jobs_running", "updated_at"}
	riverClientQueueColumnsWithoutDefault = []string{"river_client_id", "name", "updated_at"}
	riverClientQueueColumnsWithDefault    = []string{"created_at", "max_workers", "metadata", "num_jobs_completed", "num_jobs_running"}
	riverClientQueuePrimaryKeyColumns     = []string{"river_client_id", "name"}
	riverClientQueueGeneratedColumns      = []string{}
)

type (
	// RiverClientQueueSlice is an alias for a slice of pointers to RiverClientQueue.
	// This should almost always be used instead of []RiverClientQueue.
	RiverClientQueueSlice []*RiverClientQueue
	// RiverClientQueueHook is the signature for custom RiverClientQueue hook methods
	RiverClientQueueHook func(context.Context, boil.ContextExecutor, *RiverClientQueue) error

	riverClientQueueQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	riverClientQueueType                 = reflect.TypeOf(&RiverClientQueue{})
	riverClientQueueMapping              = queries.MakeStructMapping(riverClientQueueType)
	riverClientQueuePrimaryKeyMapping, _ = queries.BindMapping(riverClientQueueType, riverClientQueueMapping, riverClientQueuePrimaryKeyColumns)
	riverClientQueueInsertCacheMut       sync.RWMutex
	riverClientQueueInsertCache          = make(map[string]insertCache)
	riverClientQueueUpdateCacheMut       sync.RWMutex
	riverClientQueueUpdateCache          = make(map[string]updateCache)
	riverClientQueueUpsertCacheMut       sync.RWMutex
	riverClientQueueUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var riverClientQueueAfterSelectMu sync.Mutex
var riverClientQueueAfterSelectHooks []RiverClientQueueHook

var riverClientQueueBeforeInsertMu sync.Mutex
var riverClientQueueBeforeInsertHooks []RiverClientQueueHook
var riverClientQueueAfterInsertMu sync.Mutex
var riverClientQueueAfterInsertHooks []RiverClientQueueHook

var riverClientQueueBeforeUpdateMu sync.Mutex
var riverClientQueueBeforeUpdateHooks []RiverClientQueueHook
var riverClientQueueAfterUpdateMu sync.Mutex
var riverClientQueueAfterUpdateHooks []RiverClientQueueHook

var riverClientQueueBeforeDeleteMu sync.Mutex
var riverClientQueueBeforeDeleteHooks []RiverClientQueueHook
var riverClientQueueAfterDeleteMu sync.Mutex
var riverClientQueueAfterDeleteHooks []RiverClientQueueHook

var riverClientQueueBeforeUpsertMu sync.Mutex
var riverClientQueueBeforeUpsertHooks []RiverClientQueueHook
var riverClientQueueAfterUpsertMu sync.Mutex
var riverClientQueueAfterUpsertHooks []RiverClientQueueHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *RiverClientQueue) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range riverClientQueueAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *RiverClientQueue) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range riverClientQueueBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *RiverClientQueue) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range riverClientQueueAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *RiverClientQueue) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range riverClientQueueBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *RiverClientQueue) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range riverClientQueueAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *RiverClientQueue) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range riverClientQueueBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *RiverClientQueue) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range riverClientQueueAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *RiverClientQueue) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range riverClientQueueBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *RiverClientQueue) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range riverClientQueueAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddRiverClientQueueHook registers your hook function for all future operations.
func AddRiverClientQueueHook(hookPoint boil.HookPoint, riverClientQueueHook RiverClientQueueHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		riverClientQueueAfterSelectMu.Lock()
		riverClientQueueAfterSelectHooks = append(riverClientQueueAfterSelectHooks, riverClientQueueHook)
		riverClientQueueAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		riverClientQueueBeforeInsertMu.Lock()
		riverClientQueueBeforeInsertHooks = append(riverClientQueueBeforeInsertHooks, riverClientQueueHook)
		riverClientQueueBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		riverClientQueueAfterInsertMu.Lock()
		riverClientQueueAfterInsertHooks = append(riverClientQueueAfterInsertHooks, riverClientQueueHook)
		riverClientQueueAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		riverClientQueueBeforeUpdateMu.Lock()
		riverClientQueueBeforeUpdateHooks = append(riverClientQueueBeforeUpdateHooks, riverClientQueueHook)
		riverClientQueueBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		riverClientQueueAfterUpdateMu.Lock()
		riverClientQueueAfterUpdateHooks = append(riverClientQueueAfterUpdateHooks, riverClientQueueHook)
		riverClientQueueAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		riverClientQueueBeforeDeleteMu.Lock()
		riverClientQueueBeforeDeleteHooks = append(riverClientQueueBeforeDeleteHooks, riverClientQueueHook)
		riverClientQueueBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		riverClientQueueAfterDeleteMu.Lock()
		riverClientQueueAfterDeleteHooks = append(riverClientQueueAfterDeleteHooks, riverClientQueueHook)
		riverClientQueueAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		riverClientQueueBeforeUpsertMu.Lock()
		riverClientQueueBeforeUpsertHooks = append(riverClientQueueBeforeUpsertHooks, riverClientQueueHook)
		riverClientQueueBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		riverClientQueueAfterUpsertMu.Lock()
		riverClientQueueAfterUpsertHooks = append(riverClientQueueAfterUpsertHooks, riverClientQueueHook)
		riverClientQueueAfterUpsertMu.Unlock()
	}
}

// One returns a single riverClientQueue record from the query.
func (q riverClientQueueQuery) One(ctx context.Context, exec boil.ContextExecutor) (*RiverClientQueue, error) {
	o := &RiverClientQueue{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for river_client_queue")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all RiverClientQueue records from the query.
func (q riverClientQueueQuery) All(ctx context.Context, exec boil.ContextExecutor) (RiverClientQueueSlice, error) {
	var o []*RiverClientQueue

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to RiverClientQueue slice")
	}

	if len(riverClientQueueAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all RiverClientQueue records in the query.
func (q riverClientQueueQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count river_client_queue rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q riverClientQueueQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if river_client_queue exists")
	}

	return count > 0, nil
}

// RiverClient pointed to by the foreign key.
func (o *RiverClientQueue) RiverClient(mods ...qm.QueryMod) riverClientQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.RiverClientID),
	}

	queryMods = append(queryMods, mods...)

	return RiverClients(queryMods...)
}

// LoadRiverClient allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (riverClientQueueL) LoadRiverClient(ctx context.Context, e boil.ContextExecutor, singular bool, maybeRiverClientQueue interface{}, mods queries.Applicator) error {
	var slice []*RiverClientQueue
	var object *RiverClientQueue

	if singular {
		var ok bool
		object, ok = maybeRiverClientQueue.(*RiverClientQueue)
		if !ok {
			object = new(RiverClientQueue)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeRiverClientQueue)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeRiverClientQueue))
			}
		}
	} else {
		s, ok := maybeRiverClientQueue.(*[]*RiverClientQueue)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeRiverClientQueue)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeRiverClientQueue))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &riverClientQueueR{}
		}
		args[object.RiverClientID] = struct{}{}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &riverClientQueueR{}
			}

			args[obj.RiverClientID] = struct{}{}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`tesla_oracle.river_client`),
		qm.WhereIn(`tesla_oracle.river_client.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load RiverClient")
	}

	var resultSlice []*RiverClient
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice RiverClient")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for river_client")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for river_client")
	}

	if len(riverClientAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.RiverClient = foreign
		if foreign.R == nil {
			foreign.R = &riverClientR{}
		}
		foreign.R.RiverClientQueues = append(foreign.R.RiverClientQueues, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.RiverClientID == foreign.ID {
				local.R.RiverClient = foreign
				if foreign.R == nil {
					foreign.R = &riverClientR{}
				}
				foreign.R.RiverClientQueues = append(foreign.R.RiverClientQueues, local)
				break
			}
		}
	}

	return nil
}

// SetRiverClient of the riverClientQueue to the related item.
// Sets o.R.RiverClient to related.
// Adds o to related.R.RiverClientQueues.
func (o *RiverClientQueue) SetRiverClient(ctx context.Context, exec boil.ContextExecutor, insert bool, related *RiverClient) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"tesla_oracle\".\"river_client_queue\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"river_client_id"}),
		strmangle.WhereClause("\"", "\"", 2, riverClientQueuePrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.RiverClientID, o.Name}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.RiverClientID = related.ID
	if o.R == nil {
		o.R = &riverClientQueueR{
			RiverClient: related,
		}
	} else {
		o.R.RiverClient = related
	}

	if related.R == nil {
		related.R = &riverClientR{
			RiverClientQueues: RiverClientQueueSlice{o},
		}
	} else {
		related.R.RiverClientQueues = append(related.R.RiverClientQueues, o)
	}

	return nil
}

// RiverClientQueues retrieves all the records using an executor.
func RiverClientQueues(mods ...qm.QueryMod) riverClientQueueQuery {
	mods = append(mods, qm.From("\"tesla_oracle\".\"river_client_queue\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"tesla_oracle\".\"river_client_queue\".*"})
	}

	return riverClientQueueQuery{q}
}

// FindRiverClientQueue retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindRiverClientQueue(ctx context.Context, exec boil.ContextExecutor, riverClientID string, name string, selectCols ...string) (*RiverClientQueue, error) {
	riverClientQueueObj := &RiverClientQueue{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"tesla_oracle\".\"river_client_queue\" where \"river_client_id\"=$1 AND \"name\"=$2", sel,
	)

	q := queries.Raw(query, riverClientID, name)

	err := q.Bind(ctx, exec, riverClientQueueObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from river_client_queue")
	}

	if err = riverClientQueueObj.doAfterSelectHooks(ctx, exec); err != nil {
		return riverClientQueueObj, err
	}

	return riverClientQueueObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *RiverClientQueue) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no river_client_queue provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		if o.UpdatedAt.IsZero() {
			o.UpdatedAt = currTime
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(riverClientQueueColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	riverClientQueueInsertCacheMut.RLock()
	cache, cached := riverClientQueueInsertCache[key]
	riverClientQueueInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			riverClientQueueAllColumns,
			riverClientQueueColumnsWithDefault,
			riverClientQueueColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(riverClientQueueType, riverClientQueueMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(riverClientQueueType, riverClientQueueMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"tesla_oracle\".\"river_client_queue\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"tesla_oracle\".\"river_client_queue\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into river_client_queue")
	}

	if !cached {
		riverClientQueueInsertCacheMut.Lock()
		riverClientQueueInsertCache[key] = cache
		riverClientQueueInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the RiverClientQueue.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *RiverClientQueue) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		o.UpdatedAt = currTime
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	riverClientQueueUpdateCacheMut.RLock()
	cache, cached := riverClientQueueUpdateCache[key]
	riverClientQueueUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			riverClientQueueAllColumns,
			riverClientQueuePrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update river_client_queue, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"tesla_oracle\".\"river_client_queue\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, riverClientQueuePrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(riverClientQueueType, riverClientQueueMapping, append(wl, riverClientQueuePrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update river_client_queue row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for river_client_queue")
	}

	if !cached {
		riverClientQueueUpdateCacheMut.Lock()
		riverClientQueueUpdateCache[key] = cache
		riverClientQueueUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q riverClientQueueQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for river_client_queue")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for river_client_queue")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o RiverClientQueueSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), riverClientQueuePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"tesla_oracle\".\"river_client_queue\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, riverClientQueuePrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in riverClientQueue slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all riverClientQueue")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *RiverClientQueue) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("models: no river_client_queue provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		o.UpdatedAt = currTime
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(riverClientQueueColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	riverClientQueueUpsertCacheMut.RLock()
	cache, cached := riverClientQueueUpsertCache[key]
	riverClientQueueUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			riverClientQueueAllColumns,
			riverClientQueueColumnsWithDefault,
			riverClientQueueColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			riverClientQueueAllColumns,
			riverClientQueuePrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert river_client_queue, could not build update column list")
		}

		ret := strmangle.SetComplement(riverClientQueueAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(riverClientQueuePrimaryKeyColumns) == 0 {
				return errors.New("models: unable to upsert river_client_queue, could not build conflict column list")
			}

			conflict = make([]string, len(riverClientQueuePrimaryKeyColumns))
			copy(conflict, riverClientQueuePrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"tesla_oracle\".\"river_client_queue\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(riverClientQueueType, riverClientQueueMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(riverClientQueueType, riverClientQueueMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert river_client_queue")
	}

	if !cached {
		riverClientQueueUpsertCacheMut.Lock()
		riverClientQueueUpsertCache[key] = cache
		riverClientQueueUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single RiverClientQueue record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *RiverClientQueue) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no RiverClientQueue provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), riverClientQueuePrimaryKeyMapping)
	sql := "DELETE FROM \"tesla_oracle\".\"river_client_queue\" WHERE \"river_client_id\"=$1 AND \"name\"=$2"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from river_client_queue")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for river_client_queue")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q riverClientQueueQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no riverClientQueueQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from river_client_queue")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for river_client_queue")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o RiverClientQueueSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(riverClientQueueBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), riverClientQueuePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"tesla_oracle\".\"river_client_queue\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, riverClientQueuePrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from riverClientQueue slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for river_client_queue")
	}

	if len(riverClientQueueAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *RiverClientQueue) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindRiverClientQueue(ctx, exec, o.RiverClientID, o.Name)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *RiverClientQueueSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := RiverClientQueueSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), riverClientQueuePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"tesla_oracle\".\"river_client_queue\".* FROM \"tesla_oracle\".\"river_client_queue\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, riverClientQueuePrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in RiverClientQueueSlice")
	}

	*o = slice

	return nil
}

// RiverClientQueueExists checks if the RiverClientQueue row exists.
func RiverClientQueueExists(ctx context.Context, exec boil.ContextExecutor, riverClientID string, name string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"tesla_oracle\".\"river_client_queue\" where \"river_client_id\"=$1 AND \"name\"=$2 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, riverClientID, name)
	}
	row := exec.QueryRowContext(ctx, sql, riverClientID, name)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if river_client_queue exists")
	}

	return exists, nil
}

// Exists checks if the RiverClientQueue row exists.
func (o *RiverClientQueue) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return RiverClientQueueExists(ctx, exec, o.RiverClientID, o.Name)
}
