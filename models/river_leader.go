// Code generated by SQLBoiler 4.18.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// RiverLeader is an object representing the database table.
type RiverLeader struct {
	ElectedAt time.Time `boil:"elected_at" json:"elected_at" toml:"elected_at" yaml:"elected_at"`
	ExpiresAt time.Time `boil:"expires_at" json:"expires_at" toml:"expires_at" yaml:"expires_at"`
	LeaderID  string    `boil:"leader_id" json:"leader_id" toml:"leader_id" yaml:"leader_id"`
	Name      string    `boil:"name" json:"name" toml:"name" yaml:"name"`

	R *riverLeaderR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L riverLeaderL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var RiverLeaderColumns = struct {
	ElectedAt string
	ExpiresAt string
	LeaderID  string
	Name      string
}{
	ElectedAt: "elected_at",
	ExpiresAt: "expires_at",
	LeaderID:  "leader_id",
	Name:      "name",
}

var RiverLeaderTableColumns = struct {
	ElectedAt string
	ExpiresAt string
	LeaderID  string
	Name      string
}{
	ElectedAt: "river_leader.elected_at",
	ExpiresAt: "river_leader.expires_at",
	LeaderID:  "river_leader.leader_id",
	Name:      "river_leader.name",
}

// Generated where

var RiverLeaderWhere = struct {
	ElectedAt whereHelpertime_Time
	ExpiresAt whereHelpertime_Time
	LeaderID  whereHelperstring
	Name      whereHelperstring
}{
	ElectedAt: whereHelpertime_Time{field: "\"tesla_oracle\".\"river_leader\".\"elected_at\""},
	ExpiresAt: whereHelpertime_Time{field: "\"tesla_oracle\".\"river_leader\".\"expires_at\""},
	LeaderID:  whereHelperstring{field: "\"tesla_oracle\".\"river_leader\".\"leader_id\""},
	Name:      whereHelperstring{field: "\"tesla_oracle\".\"river_leader\".\"name\""},
}

// RiverLeaderRels is where relationship names are stored.
var RiverLeaderRels = struct {
}{}

// riverLeaderR is where relationships are stored.
type riverLeaderR struct {
}

// NewStruct creates a new relationship struct
func (*riverLeaderR) NewStruct() *riverLeaderR {
	return &riverLeaderR{}
}

// riverLeaderL is where Load methods for each relationship are stored.
type riverLeaderL struct{}

var (
	riverLeaderAllColumns            = []string{"elected_at", "expires_at", "leader_id", "name"}
	riverLeaderColumnsWithoutDefault = []string{"elected_at", "expires_at", "leader_id"}
	riverLeaderColumnsWithDefault    = []string{"name"}
	riverLeaderPrimaryKeyColumns     = []string{"name"}
	riverLeaderGeneratedColumns      = []string{}
)

type (
	// RiverLeaderSlice is an alias for a slice of pointers to RiverLeader.
	// This should almost always be used instead of []RiverLeader.
	RiverLeaderSlice []*RiverLeader
	// RiverLeaderHook is the signature for custom RiverLeader hook methods
	RiverLeaderHook func(context.Context, boil.ContextExecutor, *RiverLeader) error

	riverLeaderQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	riverLeaderType                 = reflect.TypeOf(&RiverLeader{})
	riverLeaderMapping              = queries.MakeStructMapping(riverLeaderType)
	riverLeaderPrimaryKeyMapping, _ = queries.BindMapping(riverLeaderType, riverLeaderMapping, riverLeaderPrimaryKeyColumns)
	riverLeaderInsertCacheMut       sync.RWMutex
	riverLeaderInsertCache          = make(map[string]insertCache)
	riverLeaderUpdateCacheMut       sync.RWMutex
	riverLeaderUpdateCache          = make(map[string]updateCache)
	riverLeaderUpsertCacheMut       sync.RWMutex
	riverLeaderUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var riverLeaderAfterSelectMu sync.Mutex
var riverLeaderAfterSelectHooks []RiverLeaderHook

var riverLeaderBeforeInsertMu sync.Mutex
var riverLeaderBeforeInsertHooks []RiverLeaderHook
var riverLeaderAfterInsertMu sync.Mutex
var riverLeaderAfterInsertHooks []RiverLeaderHook

var riverLeaderBeforeUpdateMu sync.Mutex
var riverLeaderBeforeUpdateHooks []RiverLeaderHook
var riverLeaderAfterUpdateMu sync.Mutex
var riverLeaderAfterUpdateHooks []RiverLeaderHook

var riverLeaderBeforeDeleteMu sync.Mutex
var riverLeaderBeforeDeleteHooks []RiverLeaderHook
var riverLeaderAfterDeleteMu sync.Mutex
var riverLeaderAfterDeleteHooks []RiverLeaderHook

var riverLeaderBeforeUpsertMu sync.Mutex
var riverLeaderBeforeUpsertHooks []RiverLeaderHook
var riverLeaderAfterUpsertMu sync.Mutex
var riverLeaderAfterUpsertHooks []RiverLeaderHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *RiverLeader) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range riverLeaderAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *RiverLeader) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range riverLeaderBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *RiverLeader) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range riverLeaderAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *RiverLeader) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range riverLeaderBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *RiverLeader) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range riverLeaderAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *RiverLeader) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range riverLeaderBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *RiverLeader) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range riverLeaderAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *RiverLeader) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range riverLeaderBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *RiverLeader) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range riverLeaderAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddRiverLeaderHook registers your hook function for all future operations.
func AddRiverLeaderHook(hookPoint boil.HookPoint, riverLeaderHook RiverLeaderHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		riverLeaderAfterSelectMu.Lock()
		riverLeaderAfterSelectHooks = append(riverLeaderAfterSelectHooks, riverLeaderHook)
		riverLeaderAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		riverLeaderBeforeInsertMu.Lock()
		riverLeaderBeforeInsertHooks = append(riverLeaderBeforeInsertHooks, riverLeaderHook)
		riverLeaderBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		riverLeaderAfterInsertMu.Lock()
		riverLeaderAfterInsertHooks = append(riverLeaderAfterInsertHooks, riverLeaderHook)
		riverLeaderAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		riverLeaderBeforeUpdateMu.Lock()
		riverLeaderBeforeUpdateHooks = append(riverLeaderBeforeUpdateHooks, riverLeaderHook)
		riverLeaderBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		riverLeaderAfterUpdateMu.Lock()
		riverLeaderAfterUpdateHooks = append(riverLeaderAfterUpdateHooks, riverLeaderHook)
		riverLeaderAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		riverLeaderBeforeDeleteMu.Lock()
		riverLeaderBeforeDeleteHooks = append(riverLeaderBeforeDeleteHooks, riverLeaderHook)
		riverLeaderBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		riverLeaderAfterDeleteMu.Lock()
		riverLeaderAfterDeleteHooks = append(riverLeaderAfterDeleteHooks, riverLeaderHook)
		riverLeaderAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		riverLeaderBeforeUpsertMu.Lock()
		riverLeaderBeforeUpsertHooks = append(riverLeaderBeforeUpsertHooks, riverLeaderHook)
		riverLeaderBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		riverLeaderAfterUpsertMu.Lock()
		riverLeaderAfterUpsertHooks = append(riverLeaderAfterUpsertHooks, riverLeaderHook)
		riverLeaderAfterUpsertMu.Unlock()
	}
}

// One returns a single riverLeader record from the query.
func (q riverLeaderQuery) One(ctx context.Context, exec boil.ContextExecutor) (*RiverLeader, error) {
	o := &RiverLeader{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for river_leader")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all RiverLeader records from the query.
func (q riverLeaderQuery) All(ctx context.Context, exec boil.ContextExecutor) (RiverLeaderSlice, error) {
	var o []*RiverLeader

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to RiverLeader slice")
	}

	if len(riverLeaderAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all RiverLeader records in the query.
func (q riverLeaderQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count river_leader rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q riverLeaderQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if river_leader exists")
	}

	return count > 0, nil
}

// RiverLeaders retrieves all the records using an executor.
func RiverLeaders(mods ...qm.QueryMod) riverLeaderQuery {
	mods = append(mods, qm.From("\"tesla_oracle\".\"river_leader\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"tesla_oracle\".\"river_leader\".*"})
	}

	return riverLeaderQuery{q}
}

// FindRiverLeader retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindRiverLeader(ctx context.Context, exec boil.ContextExecutor, name string, selectCols ...string) (*RiverLeader, error) {
	riverLeaderObj := &RiverLeader{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"tesla_oracle\".\"river_leader\" where \"name\"=$1", sel,
	)

	q := queries.Raw(query, name)

	err := q.Bind(ctx, exec, riverLeaderObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from river_leader")
	}

	if err = riverLeaderObj.doAfterSelectHooks(ctx, exec); err != nil {
		return riverLeaderObj, err
	}

	return riverLeaderObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *RiverLeader) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no river_leader provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(riverLeaderColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	riverLeaderInsertCacheMut.RLock()
	cache, cached := riverLeaderInsertCache[key]
	riverLeaderInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			riverLeaderAllColumns,
			riverLeaderColumnsWithDefault,
			riverLeaderColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(riverLeaderType, riverLeaderMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(riverLeaderType, riverLeaderMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"tesla_oracle\".\"river_leader\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"tesla_oracle\".\"river_leader\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into river_leader")
	}

	if !cached {
		riverLeaderInsertCacheMut.Lock()
		riverLeaderInsertCache[key] = cache
		riverLeaderInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the RiverLeader.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *RiverLeader) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	riverLeaderUpdateCacheMut.RLock()
	cache, cached := riverLeaderUpdateCache[key]
	riverLeaderUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			riverLeaderAllColumns,
			riverLeaderPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update river_leader, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"tesla_oracle\".\"river_leader\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, riverLeaderPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(riverLeaderType, riverLeaderMapping, append(wl, riverLeaderPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update river_leader row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for river_leader")
	}

	if !cached {
		riverLeaderUpdateCacheMut.Lock()
		riverLeaderUpdateCache[key] = cache
		riverLeaderUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q riverLeaderQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for river_leader")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for river_leader")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o RiverLeaderSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), riverLeaderPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"tesla_oracle\".\"river_leader\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, riverLeaderPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in riverLeader slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all riverLeader")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *RiverLeader) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("models: no river_leader provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(riverLeaderColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	riverLeaderUpsertCacheMut.RLock()
	cache, cached := riverLeaderUpsertCache[key]
	riverLeaderUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			riverLeaderAllColumns,
			riverLeaderColumnsWithDefault,
			riverLeaderColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			riverLeaderAllColumns,
			riverLeaderPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert river_leader, could not build update column list")
		}

		ret := strmangle.SetComplement(riverLeaderAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(riverLeaderPrimaryKeyColumns) == 0 {
				return errors.New("models: unable to upsert river_leader, could not build conflict column list")
			}

			conflict = make([]string, len(riverLeaderPrimaryKeyColumns))
			copy(conflict, riverLeaderPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"tesla_oracle\".\"river_leader\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(riverLeaderType, riverLeaderMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(riverLeaderType, riverLeaderMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert river_leader")
	}

	if !cached {
		riverLeaderUpsertCacheMut.Lock()
		riverLeaderUpsertCache[key] = cache
		riverLeaderUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single RiverLeader record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *RiverLeader) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no RiverLeader provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), riverLeaderPrimaryKeyMapping)
	sql := "DELETE FROM \"tesla_oracle\".\"river_leader\" WHERE \"name\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from river_leader")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for river_leader")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q riverLeaderQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no riverLeaderQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from river_leader")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for river_leader")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o RiverLeaderSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(riverLeaderBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), riverLeaderPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"tesla_oracle\".\"river_leader\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, riverLeaderPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from riverLeader slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for river_leader")
	}

	if len(riverLeaderAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *RiverLeader) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindRiverLeader(ctx, exec, o.Name)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *RiverLeaderSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := RiverLeaderSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), riverLeaderPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"tesla_oracle\".\"river_leader\".* FROM \"tesla_oracle\".\"river_leader\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, riverLeaderPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in RiverLeaderSlice")
	}

	*o = slice

	return nil
}

// RiverLeaderExists checks if the RiverLeader row exists.
func RiverLeaderExists(ctx context.Context, exec boil.ContextExecutor, name string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"tesla_oracle\".\"river_leader\" where \"name\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, name)
	}
	row := exec.QueryRowContext(ctx, sql, name)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if river_leader exists")
	}

	return exists, nil
}

// Exists checks if the RiverLeader row exists.
func (o *RiverLeader) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return RiverLeaderExists(ctx, exec, o.Name)
}
