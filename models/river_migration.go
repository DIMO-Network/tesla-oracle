// Code generated by SQLBoiler 4.18.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// RiverMigration is an object representing the database table.
type RiverMigration struct {
	Line      string    `boil:"line" json:"line" toml:"line" yaml:"line"`
	Version   int64     `boil:"version" json:"version" toml:"version" yaml:"version"`
	CreatedAt time.Time `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`

	R *riverMigrationR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L riverMigrationL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var RiverMigrationColumns = struct {
	Line      string
	Version   string
	CreatedAt string
}{
	Line:      "line",
	Version:   "version",
	CreatedAt: "created_at",
}

var RiverMigrationTableColumns = struct {
	Line      string
	Version   string
	CreatedAt string
}{
	Line:      "river_migration.line",
	Version:   "river_migration.version",
	CreatedAt: "river_migration.created_at",
}

// Generated where

var RiverMigrationWhere = struct {
	Line      whereHelperstring
	Version   whereHelperint64
	CreatedAt whereHelpertime_Time
}{
	Line:      whereHelperstring{field: "\"tesla_oracle\".\"river_migration\".\"line\""},
	Version:   whereHelperint64{field: "\"tesla_oracle\".\"river_migration\".\"version\""},
	CreatedAt: whereHelpertime_Time{field: "\"tesla_oracle\".\"river_migration\".\"created_at\""},
}

// RiverMigrationRels is where relationship names are stored.
var RiverMigrationRels = struct {
}{}

// riverMigrationR is where relationships are stored.
type riverMigrationR struct {
}

// NewStruct creates a new relationship struct
func (*riverMigrationR) NewStruct() *riverMigrationR {
	return &riverMigrationR{}
}

// riverMigrationL is where Load methods for each relationship are stored.
type riverMigrationL struct{}

var (
	riverMigrationAllColumns            = []string{"line", "version", "created_at"}
	riverMigrationColumnsWithoutDefault = []string{"line", "version"}
	riverMigrationColumnsWithDefault    = []string{"created_at"}
	riverMigrationPrimaryKeyColumns     = []string{"line", "version"}
	riverMigrationGeneratedColumns      = []string{}
)

type (
	// RiverMigrationSlice is an alias for a slice of pointers to RiverMigration.
	// This should almost always be used instead of []RiverMigration.
	RiverMigrationSlice []*RiverMigration
	// RiverMigrationHook is the signature for custom RiverMigration hook methods
	RiverMigrationHook func(context.Context, boil.ContextExecutor, *RiverMigration) error

	riverMigrationQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	riverMigrationType                 = reflect.TypeOf(&RiverMigration{})
	riverMigrationMapping              = queries.MakeStructMapping(riverMigrationType)
	riverMigrationPrimaryKeyMapping, _ = queries.BindMapping(riverMigrationType, riverMigrationMapping, riverMigrationPrimaryKeyColumns)
	riverMigrationInsertCacheMut       sync.RWMutex
	riverMigrationInsertCache          = make(map[string]insertCache)
	riverMigrationUpdateCacheMut       sync.RWMutex
	riverMigrationUpdateCache          = make(map[string]updateCache)
	riverMigrationUpsertCacheMut       sync.RWMutex
	riverMigrationUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var riverMigrationAfterSelectMu sync.Mutex
var riverMigrationAfterSelectHooks []RiverMigrationHook

var riverMigrationBeforeInsertMu sync.Mutex
var riverMigrationBeforeInsertHooks []RiverMigrationHook
var riverMigrationAfterInsertMu sync.Mutex
var riverMigrationAfterInsertHooks []RiverMigrationHook

var riverMigrationBeforeUpdateMu sync.Mutex
var riverMigrationBeforeUpdateHooks []RiverMigrationHook
var riverMigrationAfterUpdateMu sync.Mutex
var riverMigrationAfterUpdateHooks []RiverMigrationHook

var riverMigrationBeforeDeleteMu sync.Mutex
var riverMigrationBeforeDeleteHooks []RiverMigrationHook
var riverMigrationAfterDeleteMu sync.Mutex
var riverMigrationAfterDeleteHooks []RiverMigrationHook

var riverMigrationBeforeUpsertMu sync.Mutex
var riverMigrationBeforeUpsertHooks []RiverMigrationHook
var riverMigrationAfterUpsertMu sync.Mutex
var riverMigrationAfterUpsertHooks []RiverMigrationHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *RiverMigration) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range riverMigrationAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *RiverMigration) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range riverMigrationBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *RiverMigration) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range riverMigrationAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *RiverMigration) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range riverMigrationBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *RiverMigration) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range riverMigrationAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *RiverMigration) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range riverMigrationBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *RiverMigration) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range riverMigrationAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *RiverMigration) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range riverMigrationBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *RiverMigration) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range riverMigrationAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddRiverMigrationHook registers your hook function for all future operations.
func AddRiverMigrationHook(hookPoint boil.HookPoint, riverMigrationHook RiverMigrationHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		riverMigrationAfterSelectMu.Lock()
		riverMigrationAfterSelectHooks = append(riverMigrationAfterSelectHooks, riverMigrationHook)
		riverMigrationAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		riverMigrationBeforeInsertMu.Lock()
		riverMigrationBeforeInsertHooks = append(riverMigrationBeforeInsertHooks, riverMigrationHook)
		riverMigrationBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		riverMigrationAfterInsertMu.Lock()
		riverMigrationAfterInsertHooks = append(riverMigrationAfterInsertHooks, riverMigrationHook)
		riverMigrationAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		riverMigrationBeforeUpdateMu.Lock()
		riverMigrationBeforeUpdateHooks = append(riverMigrationBeforeUpdateHooks, riverMigrationHook)
		riverMigrationBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		riverMigrationAfterUpdateMu.Lock()
		riverMigrationAfterUpdateHooks = append(riverMigrationAfterUpdateHooks, riverMigrationHook)
		riverMigrationAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		riverMigrationBeforeDeleteMu.Lock()
		riverMigrationBeforeDeleteHooks = append(riverMigrationBeforeDeleteHooks, riverMigrationHook)
		riverMigrationBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		riverMigrationAfterDeleteMu.Lock()
		riverMigrationAfterDeleteHooks = append(riverMigrationAfterDeleteHooks, riverMigrationHook)
		riverMigrationAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		riverMigrationBeforeUpsertMu.Lock()
		riverMigrationBeforeUpsertHooks = append(riverMigrationBeforeUpsertHooks, riverMigrationHook)
		riverMigrationBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		riverMigrationAfterUpsertMu.Lock()
		riverMigrationAfterUpsertHooks = append(riverMigrationAfterUpsertHooks, riverMigrationHook)
		riverMigrationAfterUpsertMu.Unlock()
	}
}

// One returns a single riverMigration record from the query.
func (q riverMigrationQuery) One(ctx context.Context, exec boil.ContextExecutor) (*RiverMigration, error) {
	o := &RiverMigration{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for river_migration")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all RiverMigration records from the query.
func (q riverMigrationQuery) All(ctx context.Context, exec boil.ContextExecutor) (RiverMigrationSlice, error) {
	var o []*RiverMigration

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to RiverMigration slice")
	}

	if len(riverMigrationAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all RiverMigration records in the query.
func (q riverMigrationQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count river_migration rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q riverMigrationQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if river_migration exists")
	}

	return count > 0, nil
}

// RiverMigrations retrieves all the records using an executor.
func RiverMigrations(mods ...qm.QueryMod) riverMigrationQuery {
	mods = append(mods, qm.From("\"tesla_oracle\".\"river_migration\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"tesla_oracle\".\"river_migration\".*"})
	}

	return riverMigrationQuery{q}
}

// FindRiverMigration retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindRiverMigration(ctx context.Context, exec boil.ContextExecutor, line string, version int64, selectCols ...string) (*RiverMigration, error) {
	riverMigrationObj := &RiverMigration{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"tesla_oracle\".\"river_migration\" where \"line\"=$1 AND \"version\"=$2", sel,
	)

	q := queries.Raw(query, line, version)

	err := q.Bind(ctx, exec, riverMigrationObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from river_migration")
	}

	if err = riverMigrationObj.doAfterSelectHooks(ctx, exec); err != nil {
		return riverMigrationObj, err
	}

	return riverMigrationObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *RiverMigration) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no river_migration provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(riverMigrationColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	riverMigrationInsertCacheMut.RLock()
	cache, cached := riverMigrationInsertCache[key]
	riverMigrationInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			riverMigrationAllColumns,
			riverMigrationColumnsWithDefault,
			riverMigrationColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(riverMigrationType, riverMigrationMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(riverMigrationType, riverMigrationMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"tesla_oracle\".\"river_migration\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"tesla_oracle\".\"river_migration\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into river_migration")
	}

	if !cached {
		riverMigrationInsertCacheMut.Lock()
		riverMigrationInsertCache[key] = cache
		riverMigrationInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the RiverMigration.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *RiverMigration) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	riverMigrationUpdateCacheMut.RLock()
	cache, cached := riverMigrationUpdateCache[key]
	riverMigrationUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			riverMigrationAllColumns,
			riverMigrationPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update river_migration, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"tesla_oracle\".\"river_migration\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, riverMigrationPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(riverMigrationType, riverMigrationMapping, append(wl, riverMigrationPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update river_migration row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for river_migration")
	}

	if !cached {
		riverMigrationUpdateCacheMut.Lock()
		riverMigrationUpdateCache[key] = cache
		riverMigrationUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q riverMigrationQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for river_migration")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for river_migration")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o RiverMigrationSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), riverMigrationPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"tesla_oracle\".\"river_migration\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, riverMigrationPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in riverMigration slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all riverMigration")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *RiverMigration) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("models: no river_migration provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(riverMigrationColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	riverMigrationUpsertCacheMut.RLock()
	cache, cached := riverMigrationUpsertCache[key]
	riverMigrationUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			riverMigrationAllColumns,
			riverMigrationColumnsWithDefault,
			riverMigrationColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			riverMigrationAllColumns,
			riverMigrationPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert river_migration, could not build update column list")
		}

		ret := strmangle.SetComplement(riverMigrationAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(riverMigrationPrimaryKeyColumns) == 0 {
				return errors.New("models: unable to upsert river_migration, could not build conflict column list")
			}

			conflict = make([]string, len(riverMigrationPrimaryKeyColumns))
			copy(conflict, riverMigrationPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"tesla_oracle\".\"river_migration\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(riverMigrationType, riverMigrationMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(riverMigrationType, riverMigrationMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert river_migration")
	}

	if !cached {
		riverMigrationUpsertCacheMut.Lock()
		riverMigrationUpsertCache[key] = cache
		riverMigrationUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single RiverMigration record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *RiverMigration) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no RiverMigration provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), riverMigrationPrimaryKeyMapping)
	sql := "DELETE FROM \"tesla_oracle\".\"river_migration\" WHERE \"line\"=$1 AND \"version\"=$2"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from river_migration")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for river_migration")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q riverMigrationQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no riverMigrationQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from river_migration")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for river_migration")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o RiverMigrationSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(riverMigrationBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), riverMigrationPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"tesla_oracle\".\"river_migration\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, riverMigrationPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from riverMigration slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for river_migration")
	}

	if len(riverMigrationAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *RiverMigration) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindRiverMigration(ctx, exec, o.Line, o.Version)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *RiverMigrationSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := RiverMigrationSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), riverMigrationPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"tesla_oracle\".\"river_migration\".* FROM \"tesla_oracle\".\"river_migration\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, riverMigrationPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in RiverMigrationSlice")
	}

	*o = slice

	return nil
}

// RiverMigrationExists checks if the RiverMigration row exists.
func RiverMigrationExists(ctx context.Context, exec boil.ContextExecutor, line string, version int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"tesla_oracle\".\"river_migration\" where \"line\"=$1 AND \"version\"=$2 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, line, version)
	}
	row := exec.QueryRowContext(ctx, sql, line, version)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if river_migration exists")
	}

	return exists, nil
}

// Exists checks if the RiverMigration row exists.
func (o *RiverMigration) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return RiverMigrationExists(ctx, exec, o.Line, o.Version)
}
