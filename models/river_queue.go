// Code generated by SQLBoiler 4.18.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/sqlboiler/v4/types"
	"github.com/volatiletech/strmangle"
)

// RiverQueue is an object representing the database table.
type RiverQueue struct {
	Name      string     `boil:"name" json:"name" toml:"name" yaml:"name"`
	CreatedAt time.Time  `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	Metadata  types.JSON `boil:"metadata" json:"metadata" toml:"metadata" yaml:"metadata"`
	PausedAt  null.Time  `boil:"paused_at" json:"paused_at,omitempty" toml:"paused_at" yaml:"paused_at,omitempty"`
	UpdatedAt time.Time  `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`

	R *riverQueueR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L riverQueueL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var RiverQueueColumns = struct {
	Name      string
	CreatedAt string
	Metadata  string
	PausedAt  string
	UpdatedAt string
}{
	Name:      "name",
	CreatedAt: "created_at",
	Metadata:  "metadata",
	PausedAt:  "paused_at",
	UpdatedAt: "updated_at",
}

var RiverQueueTableColumns = struct {
	Name      string
	CreatedAt string
	Metadata  string
	PausedAt  string
	UpdatedAt string
}{
	Name:      "river_queue.name",
	CreatedAt: "river_queue.created_at",
	Metadata:  "river_queue.metadata",
	PausedAt:  "river_queue.paused_at",
	UpdatedAt: "river_queue.updated_at",
}

// Generated where

var RiverQueueWhere = struct {
	Name      whereHelperstring
	CreatedAt whereHelpertime_Time
	Metadata  whereHelpertypes_JSON
	PausedAt  whereHelpernull_Time
	UpdatedAt whereHelpertime_Time
}{
	Name:      whereHelperstring{field: "\"tesla_oracle\".\"river_queue\".\"name\""},
	CreatedAt: whereHelpertime_Time{field: "\"tesla_oracle\".\"river_queue\".\"created_at\""},
	Metadata:  whereHelpertypes_JSON{field: "\"tesla_oracle\".\"river_queue\".\"metadata\""},
	PausedAt:  whereHelpernull_Time{field: "\"tesla_oracle\".\"river_queue\".\"paused_at\""},
	UpdatedAt: whereHelpertime_Time{field: "\"tesla_oracle\".\"river_queue\".\"updated_at\""},
}

// RiverQueueRels is where relationship names are stored.
var RiverQueueRels = struct {
}{}

// riverQueueR is where relationships are stored.
type riverQueueR struct {
}

// NewStruct creates a new relationship struct
func (*riverQueueR) NewStruct() *riverQueueR {
	return &riverQueueR{}
}

// riverQueueL is where Load methods for each relationship are stored.
type riverQueueL struct{}

var (
	riverQueueAllColumns            = []string{"name", "created_at", "metadata", "paused_at", "updated_at"}
	riverQueueColumnsWithoutDefault = []string{"name", "updated_at"}
	riverQueueColumnsWithDefault    = []string{"created_at", "metadata", "paused_at"}
	riverQueuePrimaryKeyColumns     = []string{"name"}
	riverQueueGeneratedColumns      = []string{}
)

type (
	// RiverQueueSlice is an alias for a slice of pointers to RiverQueue.
	// This should almost always be used instead of []RiverQueue.
	RiverQueueSlice []*RiverQueue
	// RiverQueueHook is the signature for custom RiverQueue hook methods
	RiverQueueHook func(context.Context, boil.ContextExecutor, *RiverQueue) error

	riverQueueQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	riverQueueType                 = reflect.TypeOf(&RiverQueue{})
	riverQueueMapping              = queries.MakeStructMapping(riverQueueType)
	riverQueuePrimaryKeyMapping, _ = queries.BindMapping(riverQueueType, riverQueueMapping, riverQueuePrimaryKeyColumns)
	riverQueueInsertCacheMut       sync.RWMutex
	riverQueueInsertCache          = make(map[string]insertCache)
	riverQueueUpdateCacheMut       sync.RWMutex
	riverQueueUpdateCache          = make(map[string]updateCache)
	riverQueueUpsertCacheMut       sync.RWMutex
	riverQueueUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var riverQueueAfterSelectMu sync.Mutex
var riverQueueAfterSelectHooks []RiverQueueHook

var riverQueueBeforeInsertMu sync.Mutex
var riverQueueBeforeInsertHooks []RiverQueueHook
var riverQueueAfterInsertMu sync.Mutex
var riverQueueAfterInsertHooks []RiverQueueHook

var riverQueueBeforeUpdateMu sync.Mutex
var riverQueueBeforeUpdateHooks []RiverQueueHook
var riverQueueAfterUpdateMu sync.Mutex
var riverQueueAfterUpdateHooks []RiverQueueHook

var riverQueueBeforeDeleteMu sync.Mutex
var riverQueueBeforeDeleteHooks []RiverQueueHook
var riverQueueAfterDeleteMu sync.Mutex
var riverQueueAfterDeleteHooks []RiverQueueHook

var riverQueueBeforeUpsertMu sync.Mutex
var riverQueueBeforeUpsertHooks []RiverQueueHook
var riverQueueAfterUpsertMu sync.Mutex
var riverQueueAfterUpsertHooks []RiverQueueHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *RiverQueue) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range riverQueueAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *RiverQueue) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range riverQueueBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *RiverQueue) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range riverQueueAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *RiverQueue) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range riverQueueBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *RiverQueue) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range riverQueueAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *RiverQueue) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range riverQueueBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *RiverQueue) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range riverQueueAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *RiverQueue) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range riverQueueBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *RiverQueue) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range riverQueueAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddRiverQueueHook registers your hook function for all future operations.
func AddRiverQueueHook(hookPoint boil.HookPoint, riverQueueHook RiverQueueHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		riverQueueAfterSelectMu.Lock()
		riverQueueAfterSelectHooks = append(riverQueueAfterSelectHooks, riverQueueHook)
		riverQueueAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		riverQueueBeforeInsertMu.Lock()
		riverQueueBeforeInsertHooks = append(riverQueueBeforeInsertHooks, riverQueueHook)
		riverQueueBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		riverQueueAfterInsertMu.Lock()
		riverQueueAfterInsertHooks = append(riverQueueAfterInsertHooks, riverQueueHook)
		riverQueueAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		riverQueueBeforeUpdateMu.Lock()
		riverQueueBeforeUpdateHooks = append(riverQueueBeforeUpdateHooks, riverQueueHook)
		riverQueueBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		riverQueueAfterUpdateMu.Lock()
		riverQueueAfterUpdateHooks = append(riverQueueAfterUpdateHooks, riverQueueHook)
		riverQueueAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		riverQueueBeforeDeleteMu.Lock()
		riverQueueBeforeDeleteHooks = append(riverQueueBeforeDeleteHooks, riverQueueHook)
		riverQueueBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		riverQueueAfterDeleteMu.Lock()
		riverQueueAfterDeleteHooks = append(riverQueueAfterDeleteHooks, riverQueueHook)
		riverQueueAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		riverQueueBeforeUpsertMu.Lock()
		riverQueueBeforeUpsertHooks = append(riverQueueBeforeUpsertHooks, riverQueueHook)
		riverQueueBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		riverQueueAfterUpsertMu.Lock()
		riverQueueAfterUpsertHooks = append(riverQueueAfterUpsertHooks, riverQueueHook)
		riverQueueAfterUpsertMu.Unlock()
	}
}

// One returns a single riverQueue record from the query.
func (q riverQueueQuery) One(ctx context.Context, exec boil.ContextExecutor) (*RiverQueue, error) {
	o := &RiverQueue{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for river_queue")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all RiverQueue records from the query.
func (q riverQueueQuery) All(ctx context.Context, exec boil.ContextExecutor) (RiverQueueSlice, error) {
	var o []*RiverQueue

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to RiverQueue slice")
	}

	if len(riverQueueAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all RiverQueue records in the query.
func (q riverQueueQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count river_queue rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q riverQueueQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if river_queue exists")
	}

	return count > 0, nil
}

// RiverQueues retrieves all the records using an executor.
func RiverQueues(mods ...qm.QueryMod) riverQueueQuery {
	mods = append(mods, qm.From("\"tesla_oracle\".\"river_queue\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"tesla_oracle\".\"river_queue\".*"})
	}

	return riverQueueQuery{q}
}

// FindRiverQueue retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindRiverQueue(ctx context.Context, exec boil.ContextExecutor, name string, selectCols ...string) (*RiverQueue, error) {
	riverQueueObj := &RiverQueue{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"tesla_oracle\".\"river_queue\" where \"name\"=$1", sel,
	)

	q := queries.Raw(query, name)

	err := q.Bind(ctx, exec, riverQueueObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from river_queue")
	}

	if err = riverQueueObj.doAfterSelectHooks(ctx, exec); err != nil {
		return riverQueueObj, err
	}

	return riverQueueObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *RiverQueue) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no river_queue provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		if o.UpdatedAt.IsZero() {
			o.UpdatedAt = currTime
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(riverQueueColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	riverQueueInsertCacheMut.RLock()
	cache, cached := riverQueueInsertCache[key]
	riverQueueInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			riverQueueAllColumns,
			riverQueueColumnsWithDefault,
			riverQueueColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(riverQueueType, riverQueueMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(riverQueueType, riverQueueMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"tesla_oracle\".\"river_queue\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"tesla_oracle\".\"river_queue\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into river_queue")
	}

	if !cached {
		riverQueueInsertCacheMut.Lock()
		riverQueueInsertCache[key] = cache
		riverQueueInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the RiverQueue.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *RiverQueue) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		o.UpdatedAt = currTime
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	riverQueueUpdateCacheMut.RLock()
	cache, cached := riverQueueUpdateCache[key]
	riverQueueUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			riverQueueAllColumns,
			riverQueuePrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update river_queue, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"tesla_oracle\".\"river_queue\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, riverQueuePrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(riverQueueType, riverQueueMapping, append(wl, riverQueuePrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update river_queue row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for river_queue")
	}

	if !cached {
		riverQueueUpdateCacheMut.Lock()
		riverQueueUpdateCache[key] = cache
		riverQueueUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q riverQueueQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for river_queue")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for river_queue")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o RiverQueueSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), riverQueuePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"tesla_oracle\".\"river_queue\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, riverQueuePrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in riverQueue slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all riverQueue")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *RiverQueue) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("models: no river_queue provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		o.UpdatedAt = currTime
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(riverQueueColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	riverQueueUpsertCacheMut.RLock()
	cache, cached := riverQueueUpsertCache[key]
	riverQueueUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			riverQueueAllColumns,
			riverQueueColumnsWithDefault,
			riverQueueColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			riverQueueAllColumns,
			riverQueuePrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert river_queue, could not build update column list")
		}

		ret := strmangle.SetComplement(riverQueueAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(riverQueuePrimaryKeyColumns) == 0 {
				return errors.New("models: unable to upsert river_queue, could not build conflict column list")
			}

			conflict = make([]string, len(riverQueuePrimaryKeyColumns))
			copy(conflict, riverQueuePrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"tesla_oracle\".\"river_queue\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(riverQueueType, riverQueueMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(riverQueueType, riverQueueMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert river_queue")
	}

	if !cached {
		riverQueueUpsertCacheMut.Lock()
		riverQueueUpsertCache[key] = cache
		riverQueueUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single RiverQueue record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *RiverQueue) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no RiverQueue provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), riverQueuePrimaryKeyMapping)
	sql := "DELETE FROM \"tesla_oracle\".\"river_queue\" WHERE \"name\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from river_queue")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for river_queue")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q riverQueueQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no riverQueueQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from river_queue")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for river_queue")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o RiverQueueSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(riverQueueBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), riverQueuePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"tesla_oracle\".\"river_queue\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, riverQueuePrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from riverQueue slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for river_queue")
	}

	if len(riverQueueAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *RiverQueue) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindRiverQueue(ctx, exec, o.Name)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *RiverQueueSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := RiverQueueSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), riverQueuePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"tesla_oracle\".\"river_queue\".* FROM \"tesla_oracle\".\"river_queue\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, riverQueuePrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in RiverQueueSlice")
	}

	*o = slice

	return nil
}

// RiverQueueExists checks if the RiverQueue row exists.
func RiverQueueExists(ctx context.Context, exec boil.ContextExecutor, name string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"tesla_oracle\".\"river_queue\" where \"name\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, name)
	}
	row := exec.QueryRowContext(ctx, sql, name)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if river_queue exists")
	}

	return exists, nil
}

// Exists checks if the RiverQueue row exists.
func (o *RiverQueue) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return RiverQueueExists(ctx, exec, o.Name)
}
