// Code generated by SQLBoiler 4.18.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/sqlboiler/v4/types"
	"github.com/volatiletech/strmangle"
)

// PartialDevice is an object representing the database table.
type PartialDevice struct {
	Vin                    string        `boil:"vin" json:"vin" toml:"vin" yaml:"vin"`
	SyntheticDeviceAddress []byte        `boil:"synthetic_device_address" json:"synthetic_device_address" toml:"synthetic_device_address" yaml:"synthetic_device_address"`
	WalletChildNum         types.Decimal `boil:"wallet_child_num" json:"wallet_child_num" toml:"wallet_child_num" yaml:"wallet_child_num"`

	R *partialDeviceR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L partialDeviceL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var PartialDeviceColumns = struct {
	Vin                    string
	SyntheticDeviceAddress string
	WalletChildNum         string
}{
	Vin:                    "vin",
	SyntheticDeviceAddress: "synthetic_device_address",
	WalletChildNum:         "wallet_child_num",
}

var PartialDeviceTableColumns = struct {
	Vin                    string
	SyntheticDeviceAddress string
	WalletChildNum         string
}{
	Vin:                    "partial_devices.vin",
	SyntheticDeviceAddress: "partial_devices.synthetic_device_address",
	WalletChildNum:         "partial_devices.wallet_child_num",
}

// Generated where

var PartialDeviceWhere = struct {
	Vin                    whereHelperstring
	SyntheticDeviceAddress whereHelper__byte
	WalletChildNum         whereHelpertypes_Decimal
}{
	Vin:                    whereHelperstring{field: "\"tesla_oracle\".\"partial_devices\".\"vin\""},
	SyntheticDeviceAddress: whereHelper__byte{field: "\"tesla_oracle\".\"partial_devices\".\"synthetic_device_address\""},
	WalletChildNum:         whereHelpertypes_Decimal{field: "\"tesla_oracle\".\"partial_devices\".\"wallet_child_num\""},
}

// PartialDeviceRels is where relationship names are stored.
var PartialDeviceRels = struct {
}{}

// partialDeviceR is where relationships are stored.
type partialDeviceR struct {
}

// NewStruct creates a new relationship struct
func (*partialDeviceR) NewStruct() *partialDeviceR {
	return &partialDeviceR{}
}

// partialDeviceL is where Load methods for each relationship are stored.
type partialDeviceL struct{}

var (
	partialDeviceAllColumns            = []string{"vin", "synthetic_device_address", "wallet_child_num"}
	partialDeviceColumnsWithoutDefault = []string{"vin", "synthetic_device_address", "wallet_child_num"}
	partialDeviceColumnsWithDefault    = []string{}
	partialDevicePrimaryKeyColumns     = []string{"vin", "synthetic_device_address"}
	partialDeviceGeneratedColumns      = []string{}
)

type (
	// PartialDeviceSlice is an alias for a slice of pointers to PartialDevice.
	// This should almost always be used instead of []PartialDevice.
	PartialDeviceSlice []*PartialDevice
	// PartialDeviceHook is the signature for custom PartialDevice hook methods
	PartialDeviceHook func(context.Context, boil.ContextExecutor, *PartialDevice) error

	partialDeviceQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	partialDeviceType                 = reflect.TypeOf(&PartialDevice{})
	partialDeviceMapping              = queries.MakeStructMapping(partialDeviceType)
	partialDevicePrimaryKeyMapping, _ = queries.BindMapping(partialDeviceType, partialDeviceMapping, partialDevicePrimaryKeyColumns)
	partialDeviceInsertCacheMut       sync.RWMutex
	partialDeviceInsertCache          = make(map[string]insertCache)
	partialDeviceUpdateCacheMut       sync.RWMutex
	partialDeviceUpdateCache          = make(map[string]updateCache)
	partialDeviceUpsertCacheMut       sync.RWMutex
	partialDeviceUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var partialDeviceAfterSelectMu sync.Mutex
var partialDeviceAfterSelectHooks []PartialDeviceHook

var partialDeviceBeforeInsertMu sync.Mutex
var partialDeviceBeforeInsertHooks []PartialDeviceHook
var partialDeviceAfterInsertMu sync.Mutex
var partialDeviceAfterInsertHooks []PartialDeviceHook

var partialDeviceBeforeUpdateMu sync.Mutex
var partialDeviceBeforeUpdateHooks []PartialDeviceHook
var partialDeviceAfterUpdateMu sync.Mutex
var partialDeviceAfterUpdateHooks []PartialDeviceHook

var partialDeviceBeforeDeleteMu sync.Mutex
var partialDeviceBeforeDeleteHooks []PartialDeviceHook
var partialDeviceAfterDeleteMu sync.Mutex
var partialDeviceAfterDeleteHooks []PartialDeviceHook

var partialDeviceBeforeUpsertMu sync.Mutex
var partialDeviceBeforeUpsertHooks []PartialDeviceHook
var partialDeviceAfterUpsertMu sync.Mutex
var partialDeviceAfterUpsertHooks []PartialDeviceHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *PartialDevice) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range partialDeviceAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *PartialDevice) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range partialDeviceBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *PartialDevice) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range partialDeviceAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *PartialDevice) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range partialDeviceBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *PartialDevice) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range partialDeviceAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *PartialDevice) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range partialDeviceBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *PartialDevice) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range partialDeviceAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *PartialDevice) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range partialDeviceBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *PartialDevice) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range partialDeviceAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddPartialDeviceHook registers your hook function for all future operations.
func AddPartialDeviceHook(hookPoint boil.HookPoint, partialDeviceHook PartialDeviceHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		partialDeviceAfterSelectMu.Lock()
		partialDeviceAfterSelectHooks = append(partialDeviceAfterSelectHooks, partialDeviceHook)
		partialDeviceAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		partialDeviceBeforeInsertMu.Lock()
		partialDeviceBeforeInsertHooks = append(partialDeviceBeforeInsertHooks, partialDeviceHook)
		partialDeviceBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		partialDeviceAfterInsertMu.Lock()
		partialDeviceAfterInsertHooks = append(partialDeviceAfterInsertHooks, partialDeviceHook)
		partialDeviceAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		partialDeviceBeforeUpdateMu.Lock()
		partialDeviceBeforeUpdateHooks = append(partialDeviceBeforeUpdateHooks, partialDeviceHook)
		partialDeviceBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		partialDeviceAfterUpdateMu.Lock()
		partialDeviceAfterUpdateHooks = append(partialDeviceAfterUpdateHooks, partialDeviceHook)
		partialDeviceAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		partialDeviceBeforeDeleteMu.Lock()
		partialDeviceBeforeDeleteHooks = append(partialDeviceBeforeDeleteHooks, partialDeviceHook)
		partialDeviceBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		partialDeviceAfterDeleteMu.Lock()
		partialDeviceAfterDeleteHooks = append(partialDeviceAfterDeleteHooks, partialDeviceHook)
		partialDeviceAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		partialDeviceBeforeUpsertMu.Lock()
		partialDeviceBeforeUpsertHooks = append(partialDeviceBeforeUpsertHooks, partialDeviceHook)
		partialDeviceBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		partialDeviceAfterUpsertMu.Lock()
		partialDeviceAfterUpsertHooks = append(partialDeviceAfterUpsertHooks, partialDeviceHook)
		partialDeviceAfterUpsertMu.Unlock()
	}
}

// One returns a single partialDevice record from the query.
func (q partialDeviceQuery) One(ctx context.Context, exec boil.ContextExecutor) (*PartialDevice, error) {
	o := &PartialDevice{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for partial_devices")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all PartialDevice records from the query.
func (q partialDeviceQuery) All(ctx context.Context, exec boil.ContextExecutor) (PartialDeviceSlice, error) {
	var o []*PartialDevice

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to PartialDevice slice")
	}

	if len(partialDeviceAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all PartialDevice records in the query.
func (q partialDeviceQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count partial_devices rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q partialDeviceQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if partial_devices exists")
	}

	return count > 0, nil
}

// PartialDevices retrieves all the records using an executor.
func PartialDevices(mods ...qm.QueryMod) partialDeviceQuery {
	mods = append(mods, qm.From("\"tesla_oracle\".\"partial_devices\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"tesla_oracle\".\"partial_devices\".*"})
	}

	return partialDeviceQuery{q}
}

// FindPartialDevice retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindPartialDevice(ctx context.Context, exec boil.ContextExecutor, vin string, syntheticDeviceAddress []byte, selectCols ...string) (*PartialDevice, error) {
	partialDeviceObj := &PartialDevice{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"tesla_oracle\".\"partial_devices\" where \"vin\"=$1 AND \"synthetic_device_address\"=$2", sel,
	)

	q := queries.Raw(query, vin, syntheticDeviceAddress)

	err := q.Bind(ctx, exec, partialDeviceObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from partial_devices")
	}

	if err = partialDeviceObj.doAfterSelectHooks(ctx, exec); err != nil {
		return partialDeviceObj, err
	}

	return partialDeviceObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *PartialDevice) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no partial_devices provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(partialDeviceColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	partialDeviceInsertCacheMut.RLock()
	cache, cached := partialDeviceInsertCache[key]
	partialDeviceInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			partialDeviceAllColumns,
			partialDeviceColumnsWithDefault,
			partialDeviceColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(partialDeviceType, partialDeviceMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(partialDeviceType, partialDeviceMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"tesla_oracle\".\"partial_devices\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"tesla_oracle\".\"partial_devices\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into partial_devices")
	}

	if !cached {
		partialDeviceInsertCacheMut.Lock()
		partialDeviceInsertCache[key] = cache
		partialDeviceInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the PartialDevice.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *PartialDevice) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	partialDeviceUpdateCacheMut.RLock()
	cache, cached := partialDeviceUpdateCache[key]
	partialDeviceUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			partialDeviceAllColumns,
			partialDevicePrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update partial_devices, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"tesla_oracle\".\"partial_devices\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, partialDevicePrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(partialDeviceType, partialDeviceMapping, append(wl, partialDevicePrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update partial_devices row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for partial_devices")
	}

	if !cached {
		partialDeviceUpdateCacheMut.Lock()
		partialDeviceUpdateCache[key] = cache
		partialDeviceUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q partialDeviceQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for partial_devices")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for partial_devices")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o PartialDeviceSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), partialDevicePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"tesla_oracle\".\"partial_devices\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, partialDevicePrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in partialDevice slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all partialDevice")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *PartialDevice) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("models: no partial_devices provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(partialDeviceColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	partialDeviceUpsertCacheMut.RLock()
	cache, cached := partialDeviceUpsertCache[key]
	partialDeviceUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			partialDeviceAllColumns,
			partialDeviceColumnsWithDefault,
			partialDeviceColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			partialDeviceAllColumns,
			partialDevicePrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert partial_devices, could not build update column list")
		}

		ret := strmangle.SetComplement(partialDeviceAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(partialDevicePrimaryKeyColumns) == 0 {
				return errors.New("models: unable to upsert partial_devices, could not build conflict column list")
			}

			conflict = make([]string, len(partialDevicePrimaryKeyColumns))
			copy(conflict, partialDevicePrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"tesla_oracle\".\"partial_devices\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(partialDeviceType, partialDeviceMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(partialDeviceType, partialDeviceMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert partial_devices")
	}

	if !cached {
		partialDeviceUpsertCacheMut.Lock()
		partialDeviceUpsertCache[key] = cache
		partialDeviceUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single PartialDevice record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *PartialDevice) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no PartialDevice provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), partialDevicePrimaryKeyMapping)
	sql := "DELETE FROM \"tesla_oracle\".\"partial_devices\" WHERE \"vin\"=$1 AND \"synthetic_device_address\"=$2"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from partial_devices")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for partial_devices")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q partialDeviceQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no partialDeviceQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from partial_devices")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for partial_devices")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o PartialDeviceSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(partialDeviceBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), partialDevicePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"tesla_oracle\".\"partial_devices\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, partialDevicePrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from partialDevice slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for partial_devices")
	}

	if len(partialDeviceAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *PartialDevice) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindPartialDevice(ctx, exec, o.Vin, o.SyntheticDeviceAddress)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *PartialDeviceSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := PartialDeviceSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), partialDevicePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"tesla_oracle\".\"partial_devices\".* FROM \"tesla_oracle\".\"partial_devices\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, partialDevicePrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in PartialDeviceSlice")
	}

	*o = slice

	return nil
}

// PartialDeviceExists checks if the PartialDevice row exists.
func PartialDeviceExists(ctx context.Context, exec boil.ContextExecutor, vin string, syntheticDeviceAddress []byte) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"tesla_oracle\".\"partial_devices\" where \"vin\"=$1 AND \"synthetic_device_address\"=$2 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, vin, syntheticDeviceAddress)
	}
	row := exec.QueryRowContext(ctx, sql, vin, syntheticDeviceAddress)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if partial_devices exists")
	}

	return exists, nil
}

// Exists checks if the PartialDevice row exists.
func (o *PartialDevice) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return PartialDeviceExists(ctx, exec, o.Vin, o.SyntheticDeviceAddress)
}
