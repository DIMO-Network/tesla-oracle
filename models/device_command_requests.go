// Code generated by SQLBoiler 4.19.5 (https://github.com/aarondl/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/aarondl/null/v8"
	"github.com/aarondl/sqlboiler/v4/boil"
	"github.com/aarondl/sqlboiler/v4/queries"
	"github.com/aarondl/sqlboiler/v4/queries/qm"
	"github.com/aarondl/sqlboiler/v4/queries/qmhelper"
	"github.com/aarondl/strmangle"
	"github.com/friendsofgo/errors"
)

// DeviceCommandRequest is an object representing the database table.
type DeviceCommandRequest struct {
	ID             string      `boil:"id" json:"id" toml:"id" yaml:"id"`
	VehicleTokenID int         `boil:"vehicle_token_id" json:"vehicle_token_id" toml:"vehicle_token_id" yaml:"vehicle_token_id"`
	Command        string      `boil:"command" json:"command" toml:"command" yaml:"command"`
	Status         string      `boil:"status" json:"status" toml:"status" yaml:"status"`
	ErrorMessage   null.String `boil:"error_message" json:"error_message,omitempty" toml:"error_message" yaml:"error_message,omitempty"`
	CreatedAt      time.Time   `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedAt      time.Time   `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`
	WakeAttempts   int         `boil:"wake_attempts" json:"wake_attempts" toml:"wake_attempts" yaml:"wake_attempts"`

	R *deviceCommandRequestR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L deviceCommandRequestL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var DeviceCommandRequestColumns = struct {
	ID             string
	VehicleTokenID string
	Command        string
	Status         string
	ErrorMessage   string
	CreatedAt      string
	UpdatedAt      string
	WakeAttempts   string
}{
	ID:             "id",
	VehicleTokenID: "vehicle_token_id",
	Command:        "command",
	Status:         "status",
	ErrorMessage:   "error_message",
	CreatedAt:      "created_at",
	UpdatedAt:      "updated_at",
	WakeAttempts:   "wake_attempts",
}

var DeviceCommandRequestTableColumns = struct {
	ID             string
	VehicleTokenID string
	Command        string
	Status         string
	ErrorMessage   string
	CreatedAt      string
	UpdatedAt      string
	WakeAttempts   string
}{
	ID:             "device_command_requests.id",
	VehicleTokenID: "device_command_requests.vehicle_token_id",
	Command:        "device_command_requests.command",
	Status:         "device_command_requests.status",
	ErrorMessage:   "device_command_requests.error_message",
	CreatedAt:      "device_command_requests.created_at",
	UpdatedAt:      "device_command_requests.updated_at",
	WakeAttempts:   "device_command_requests.wake_attempts",
}

// Generated where

type whereHelperstring struct{ field string }

func (w whereHelperstring) EQ(x string) qm.QueryMod      { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperstring) NEQ(x string) qm.QueryMod     { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperstring) LT(x string) qm.QueryMod      { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperstring) LTE(x string) qm.QueryMod     { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperstring) GT(x string) qm.QueryMod      { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperstring) GTE(x string) qm.QueryMod     { return qmhelper.Where(w.field, qmhelper.GTE, x) }
func (w whereHelperstring) LIKE(x string) qm.QueryMod    { return qm.Where(w.field+" LIKE ?", x) }
func (w whereHelperstring) NLIKE(x string) qm.QueryMod   { return qm.Where(w.field+" NOT LIKE ?", x) }
func (w whereHelperstring) ILIKE(x string) qm.QueryMod   { return qm.Where(w.field+" ILIKE ?", x) }
func (w whereHelperstring) NILIKE(x string) qm.QueryMod  { return qm.Where(w.field+" NOT ILIKE ?", x) }
func (w whereHelperstring) SIMILAR(x string) qm.QueryMod { return qm.Where(w.field+" SIMILAR TO ?", x) }
func (w whereHelperstring) NSIMILAR(x string) qm.QueryMod {
	return qm.Where(w.field+" NOT SIMILAR TO ?", x)
}
func (w whereHelperstring) IN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelperstring) NIN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

type whereHelperint struct{ field string }

func (w whereHelperint) EQ(x int) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperint) NEQ(x int) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperint) LT(x int) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperint) LTE(x int) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperint) GT(x int) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperint) GTE(x int) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }
func (w whereHelperint) IN(slice []int) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelperint) NIN(slice []int) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

type whereHelpernull_String struct{ field string }

func (w whereHelpernull_String) EQ(x null.String) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_String) NEQ(x null.String) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_String) LT(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_String) LTE(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_String) GT(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_String) GTE(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}
func (w whereHelpernull_String) LIKE(x null.String) qm.QueryMod {
	return qm.Where(w.field+" LIKE ?", x)
}
func (w whereHelpernull_String) NLIKE(x null.String) qm.QueryMod {
	return qm.Where(w.field+" NOT LIKE ?", x)
}
func (w whereHelpernull_String) ILIKE(x null.String) qm.QueryMod {
	return qm.Where(w.field+" ILIKE ?", x)
}
func (w whereHelpernull_String) NILIKE(x null.String) qm.QueryMod {
	return qm.Where(w.field+" NOT ILIKE ?", x)
}
func (w whereHelpernull_String) SIMILAR(x null.String) qm.QueryMod {
	return qm.Where(w.field+" SIMILAR TO ?", x)
}
func (w whereHelpernull_String) NSIMILAR(x null.String) qm.QueryMod {
	return qm.Where(w.field+" NOT SIMILAR TO ?", x)
}
func (w whereHelpernull_String) IN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelpernull_String) NIN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

func (w whereHelpernull_String) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_String) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }

type whereHelpertime_Time struct{ field string }

func (w whereHelpertime_Time) EQ(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.EQ, x)
}
func (w whereHelpertime_Time) NEQ(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.NEQ, x)
}
func (w whereHelpertime_Time) LT(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpertime_Time) LTE(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpertime_Time) GT(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpertime_Time) GTE(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

var DeviceCommandRequestWhere = struct {
	ID             whereHelperstring
	VehicleTokenID whereHelperint
	Command        whereHelperstring
	Status         whereHelperstring
	ErrorMessage   whereHelpernull_String
	CreatedAt      whereHelpertime_Time
	UpdatedAt      whereHelpertime_Time
	WakeAttempts   whereHelperint
}{
	ID:             whereHelperstring{field: "\"tesla_oracle\".\"device_command_requests\".\"id\""},
	VehicleTokenID: whereHelperint{field: "\"tesla_oracle\".\"device_command_requests\".\"vehicle_token_id\""},
	Command:        whereHelperstring{field: "\"tesla_oracle\".\"device_command_requests\".\"command\""},
	Status:         whereHelperstring{field: "\"tesla_oracle\".\"device_command_requests\".\"status\""},
	ErrorMessage:   whereHelpernull_String{field: "\"tesla_oracle\".\"device_command_requests\".\"error_message\""},
	CreatedAt:      whereHelpertime_Time{field: "\"tesla_oracle\".\"device_command_requests\".\"created_at\""},
	UpdatedAt:      whereHelpertime_Time{field: "\"tesla_oracle\".\"device_command_requests\".\"updated_at\""},
	WakeAttempts:   whereHelperint{field: "\"tesla_oracle\".\"device_command_requests\".\"wake_attempts\""},
}

// DeviceCommandRequestRels is where relationship names are stored.
var DeviceCommandRequestRels = struct {
	VehicleToken string
}{
	VehicleToken: "VehicleToken",
}

// deviceCommandRequestR is where relationships are stored.
type deviceCommandRequestR struct {
	VehicleToken *SyntheticDevice `boil:"VehicleToken" json:"VehicleToken" toml:"VehicleToken" yaml:"VehicleToken"`
}

// NewStruct creates a new relationship struct
func (*deviceCommandRequestR) NewStruct() *deviceCommandRequestR {
	return &deviceCommandRequestR{}
}

func (o *DeviceCommandRequest) GetVehicleToken() *SyntheticDevice {
	if o == nil {
		return nil
	}

	return o.R.GetVehicleToken()
}

func (r *deviceCommandRequestR) GetVehicleToken() *SyntheticDevice {
	if r == nil {
		return nil
	}

	return r.VehicleToken
}

// deviceCommandRequestL is where Load methods for each relationship are stored.
type deviceCommandRequestL struct{}

var (
	deviceCommandRequestAllColumns            = []string{"id", "vehicle_token_id", "command", "status", "error_message", "created_at", "updated_at", "wake_attempts"}
	deviceCommandRequestColumnsWithoutDefault = []string{"id", "vehicle_token_id", "command"}
	deviceCommandRequestColumnsWithDefault    = []string{"status", "error_message", "created_at", "updated_at", "wake_attempts"}
	deviceCommandRequestPrimaryKeyColumns     = []string{"id"}
	deviceCommandRequestGeneratedColumns      = []string{}
)

type (
	// DeviceCommandRequestSlice is an alias for a slice of pointers to DeviceCommandRequest.
	// This should almost always be used instead of []DeviceCommandRequest.
	DeviceCommandRequestSlice []*DeviceCommandRequest
	// DeviceCommandRequestHook is the signature for custom DeviceCommandRequest hook methods
	DeviceCommandRequestHook func(context.Context, boil.ContextExecutor, *DeviceCommandRequest) error

	deviceCommandRequestQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	deviceCommandRequestType                 = reflect.TypeOf(&DeviceCommandRequest{})
	deviceCommandRequestMapping              = queries.MakeStructMapping(deviceCommandRequestType)
	deviceCommandRequestPrimaryKeyMapping, _ = queries.BindMapping(deviceCommandRequestType, deviceCommandRequestMapping, deviceCommandRequestPrimaryKeyColumns)
	deviceCommandRequestInsertCacheMut       sync.RWMutex
	deviceCommandRequestInsertCache          = make(map[string]insertCache)
	deviceCommandRequestUpdateCacheMut       sync.RWMutex
	deviceCommandRequestUpdateCache          = make(map[string]updateCache)
	deviceCommandRequestUpsertCacheMut       sync.RWMutex
	deviceCommandRequestUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var deviceCommandRequestAfterSelectMu sync.Mutex
var deviceCommandRequestAfterSelectHooks []DeviceCommandRequestHook

var deviceCommandRequestBeforeInsertMu sync.Mutex
var deviceCommandRequestBeforeInsertHooks []DeviceCommandRequestHook
var deviceCommandRequestAfterInsertMu sync.Mutex
var deviceCommandRequestAfterInsertHooks []DeviceCommandRequestHook

var deviceCommandRequestBeforeUpdateMu sync.Mutex
var deviceCommandRequestBeforeUpdateHooks []DeviceCommandRequestHook
var deviceCommandRequestAfterUpdateMu sync.Mutex
var deviceCommandRequestAfterUpdateHooks []DeviceCommandRequestHook

var deviceCommandRequestBeforeDeleteMu sync.Mutex
var deviceCommandRequestBeforeDeleteHooks []DeviceCommandRequestHook
var deviceCommandRequestAfterDeleteMu sync.Mutex
var deviceCommandRequestAfterDeleteHooks []DeviceCommandRequestHook

var deviceCommandRequestBeforeUpsertMu sync.Mutex
var deviceCommandRequestBeforeUpsertHooks []DeviceCommandRequestHook
var deviceCommandRequestAfterUpsertMu sync.Mutex
var deviceCommandRequestAfterUpsertHooks []DeviceCommandRequestHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *DeviceCommandRequest) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range deviceCommandRequestAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *DeviceCommandRequest) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range deviceCommandRequestBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *DeviceCommandRequest) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range deviceCommandRequestAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *DeviceCommandRequest) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range deviceCommandRequestBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *DeviceCommandRequest) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range deviceCommandRequestAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *DeviceCommandRequest) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range deviceCommandRequestBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *DeviceCommandRequest) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range deviceCommandRequestAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *DeviceCommandRequest) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range deviceCommandRequestBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *DeviceCommandRequest) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range deviceCommandRequestAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddDeviceCommandRequestHook registers your hook function for all future operations.
func AddDeviceCommandRequestHook(hookPoint boil.HookPoint, deviceCommandRequestHook DeviceCommandRequestHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		deviceCommandRequestAfterSelectMu.Lock()
		deviceCommandRequestAfterSelectHooks = append(deviceCommandRequestAfterSelectHooks, deviceCommandRequestHook)
		deviceCommandRequestAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		deviceCommandRequestBeforeInsertMu.Lock()
		deviceCommandRequestBeforeInsertHooks = append(deviceCommandRequestBeforeInsertHooks, deviceCommandRequestHook)
		deviceCommandRequestBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		deviceCommandRequestAfterInsertMu.Lock()
		deviceCommandRequestAfterInsertHooks = append(deviceCommandRequestAfterInsertHooks, deviceCommandRequestHook)
		deviceCommandRequestAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		deviceCommandRequestBeforeUpdateMu.Lock()
		deviceCommandRequestBeforeUpdateHooks = append(deviceCommandRequestBeforeUpdateHooks, deviceCommandRequestHook)
		deviceCommandRequestBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		deviceCommandRequestAfterUpdateMu.Lock()
		deviceCommandRequestAfterUpdateHooks = append(deviceCommandRequestAfterUpdateHooks, deviceCommandRequestHook)
		deviceCommandRequestAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		deviceCommandRequestBeforeDeleteMu.Lock()
		deviceCommandRequestBeforeDeleteHooks = append(deviceCommandRequestBeforeDeleteHooks, deviceCommandRequestHook)
		deviceCommandRequestBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		deviceCommandRequestAfterDeleteMu.Lock()
		deviceCommandRequestAfterDeleteHooks = append(deviceCommandRequestAfterDeleteHooks, deviceCommandRequestHook)
		deviceCommandRequestAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		deviceCommandRequestBeforeUpsertMu.Lock()
		deviceCommandRequestBeforeUpsertHooks = append(deviceCommandRequestBeforeUpsertHooks, deviceCommandRequestHook)
		deviceCommandRequestBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		deviceCommandRequestAfterUpsertMu.Lock()
		deviceCommandRequestAfterUpsertHooks = append(deviceCommandRequestAfterUpsertHooks, deviceCommandRequestHook)
		deviceCommandRequestAfterUpsertMu.Unlock()
	}
}

// One returns a single deviceCommandRequest record from the query.
func (q deviceCommandRequestQuery) One(ctx context.Context, exec boil.ContextExecutor) (*DeviceCommandRequest, error) {
	o := &DeviceCommandRequest{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for device_command_requests")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all DeviceCommandRequest records from the query.
func (q deviceCommandRequestQuery) All(ctx context.Context, exec boil.ContextExecutor) (DeviceCommandRequestSlice, error) {
	var o []*DeviceCommandRequest

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to DeviceCommandRequest slice")
	}

	if len(deviceCommandRequestAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all DeviceCommandRequest records in the query.
func (q deviceCommandRequestQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count device_command_requests rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q deviceCommandRequestQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if device_command_requests exists")
	}

	return count > 0, nil
}

// VehicleToken pointed to by the foreign key.
func (o *DeviceCommandRequest) VehicleToken(mods ...qm.QueryMod) syntheticDeviceQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"vehicle_token_id\" = ?", o.VehicleTokenID),
	}

	queryMods = append(queryMods, mods...)

	return SyntheticDevices(queryMods...)
}

// LoadVehicleToken allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (deviceCommandRequestL) LoadVehicleToken(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDeviceCommandRequest interface{}, mods queries.Applicator) error {
	var slice []*DeviceCommandRequest
	var object *DeviceCommandRequest

	if singular {
		var ok bool
		object, ok = maybeDeviceCommandRequest.(*DeviceCommandRequest)
		if !ok {
			object = new(DeviceCommandRequest)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDeviceCommandRequest)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDeviceCommandRequest))
			}
		}
	} else {
		s, ok := maybeDeviceCommandRequest.(*[]*DeviceCommandRequest)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDeviceCommandRequest)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDeviceCommandRequest))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &deviceCommandRequestR{}
		}
		if !queries.IsNil(object.VehicleTokenID) {
			args[object.VehicleTokenID] = struct{}{}
		}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &deviceCommandRequestR{}
			}

			if !queries.IsNil(obj.VehicleTokenID) {
				args[obj.VehicleTokenID] = struct{}{}
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`tesla_oracle.synthetic_devices`),
		qm.WhereIn(`tesla_oracle.synthetic_devices.vehicle_token_id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load SyntheticDevice")
	}

	var resultSlice []*SyntheticDevice
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice SyntheticDevice")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for synthetic_devices")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for synthetic_devices")
	}

	if len(syntheticDeviceAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.VehicleToken = foreign
		if foreign.R == nil {
			foreign.R = &syntheticDeviceR{}
		}
		foreign.R.VehicleTokenDeviceCommandRequests = append(foreign.R.VehicleTokenDeviceCommandRequests, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.VehicleTokenID, foreign.VehicleTokenID) {
				local.R.VehicleToken = foreign
				if foreign.R == nil {
					foreign.R = &syntheticDeviceR{}
				}
				foreign.R.VehicleTokenDeviceCommandRequests = append(foreign.R.VehicleTokenDeviceCommandRequests, local)
				break
			}
		}
	}

	return nil
}

// SetVehicleToken of the deviceCommandRequest to the related item.
// Sets o.R.VehicleToken to related.
// Adds o to related.R.VehicleTokenDeviceCommandRequests.
func (o *DeviceCommandRequest) SetVehicleToken(ctx context.Context, exec boil.ContextExecutor, insert bool, related *SyntheticDevice) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"tesla_oracle\".\"device_command_requests\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"vehicle_token_id"}),
		strmangle.WhereClause("\"", "\"", 2, deviceCommandRequestPrimaryKeyColumns),
	)
	values := []interface{}{related.VehicleTokenID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.VehicleTokenID, related.VehicleTokenID)
	if o.R == nil {
		o.R = &deviceCommandRequestR{
			VehicleToken: related,
		}
	} else {
		o.R.VehicleToken = related
	}

	if related.R == nil {
		related.R = &syntheticDeviceR{
			VehicleTokenDeviceCommandRequests: DeviceCommandRequestSlice{o},
		}
	} else {
		related.R.VehicleTokenDeviceCommandRequests = append(related.R.VehicleTokenDeviceCommandRequests, o)
	}

	return nil
}

// DeviceCommandRequests retrieves all the records using an executor.
func DeviceCommandRequests(mods ...qm.QueryMod) deviceCommandRequestQuery {
	mods = append(mods, qm.From("\"tesla_oracle\".\"device_command_requests\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"tesla_oracle\".\"device_command_requests\".*"})
	}

	return deviceCommandRequestQuery{q}
}

// FindDeviceCommandRequest retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindDeviceCommandRequest(ctx context.Context, exec boil.ContextExecutor, iD string, selectCols ...string) (*DeviceCommandRequest, error) {
	deviceCommandRequestObj := &DeviceCommandRequest{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"tesla_oracle\".\"device_command_requests\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, deviceCommandRequestObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from device_command_requests")
	}

	if err = deviceCommandRequestObj.doAfterSelectHooks(ctx, exec); err != nil {
		return deviceCommandRequestObj, err
	}

	return deviceCommandRequestObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *DeviceCommandRequest) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no device_command_requests provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		if o.UpdatedAt.IsZero() {
			o.UpdatedAt = currTime
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(deviceCommandRequestColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	deviceCommandRequestInsertCacheMut.RLock()
	cache, cached := deviceCommandRequestInsertCache[key]
	deviceCommandRequestInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			deviceCommandRequestAllColumns,
			deviceCommandRequestColumnsWithDefault,
			deviceCommandRequestColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(deviceCommandRequestType, deviceCommandRequestMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(deviceCommandRequestType, deviceCommandRequestMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"tesla_oracle\".\"device_command_requests\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"tesla_oracle\".\"device_command_requests\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into device_command_requests")
	}

	if !cached {
		deviceCommandRequestInsertCacheMut.Lock()
		deviceCommandRequestInsertCache[key] = cache
		deviceCommandRequestInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the DeviceCommandRequest.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *DeviceCommandRequest) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		o.UpdatedAt = currTime
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	deviceCommandRequestUpdateCacheMut.RLock()
	cache, cached := deviceCommandRequestUpdateCache[key]
	deviceCommandRequestUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			deviceCommandRequestAllColumns,
			deviceCommandRequestPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update device_command_requests, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"tesla_oracle\".\"device_command_requests\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, deviceCommandRequestPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(deviceCommandRequestType, deviceCommandRequestMapping, append(wl, deviceCommandRequestPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update device_command_requests row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for device_command_requests")
	}

	if !cached {
		deviceCommandRequestUpdateCacheMut.Lock()
		deviceCommandRequestUpdateCache[key] = cache
		deviceCommandRequestUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q deviceCommandRequestQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for device_command_requests")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for device_command_requests")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o DeviceCommandRequestSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), deviceCommandRequestPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"tesla_oracle\".\"device_command_requests\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, deviceCommandRequestPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in deviceCommandRequest slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all deviceCommandRequest")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *DeviceCommandRequest) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("models: no device_command_requests provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		o.UpdatedAt = currTime
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(deviceCommandRequestColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	deviceCommandRequestUpsertCacheMut.RLock()
	cache, cached := deviceCommandRequestUpsertCache[key]
	deviceCommandRequestUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			deviceCommandRequestAllColumns,
			deviceCommandRequestColumnsWithDefault,
			deviceCommandRequestColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			deviceCommandRequestAllColumns,
			deviceCommandRequestPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert device_command_requests, could not build update column list")
		}

		ret := strmangle.SetComplement(deviceCommandRequestAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(deviceCommandRequestPrimaryKeyColumns) == 0 {
				return errors.New("models: unable to upsert device_command_requests, could not build conflict column list")
			}

			conflict = make([]string, len(deviceCommandRequestPrimaryKeyColumns))
			copy(conflict, deviceCommandRequestPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"tesla_oracle\".\"device_command_requests\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(deviceCommandRequestType, deviceCommandRequestMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(deviceCommandRequestType, deviceCommandRequestMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert device_command_requests")
	}

	if !cached {
		deviceCommandRequestUpsertCacheMut.Lock()
		deviceCommandRequestUpsertCache[key] = cache
		deviceCommandRequestUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single DeviceCommandRequest record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *DeviceCommandRequest) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no DeviceCommandRequest provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), deviceCommandRequestPrimaryKeyMapping)
	sql := "DELETE FROM \"tesla_oracle\".\"device_command_requests\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from device_command_requests")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for device_command_requests")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q deviceCommandRequestQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no deviceCommandRequestQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from device_command_requests")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for device_command_requests")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o DeviceCommandRequestSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(deviceCommandRequestBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), deviceCommandRequestPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"tesla_oracle\".\"device_command_requests\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, deviceCommandRequestPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from deviceCommandRequest slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for device_command_requests")
	}

	if len(deviceCommandRequestAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *DeviceCommandRequest) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindDeviceCommandRequest(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *DeviceCommandRequestSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := DeviceCommandRequestSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), deviceCommandRequestPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"tesla_oracle\".\"device_command_requests\".* FROM \"tesla_oracle\".\"device_command_requests\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, deviceCommandRequestPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in DeviceCommandRequestSlice")
	}

	*o = slice

	return nil
}

// DeviceCommandRequestExists checks if the DeviceCommandRequest row exists.
func DeviceCommandRequestExists(ctx context.Context, exec boil.ContextExecutor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"tesla_oracle\".\"device_command_requests\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if device_command_requests exists")
	}

	return exists, nil
}

// Exists checks if the DeviceCommandRequest row exists.
func (o *DeviceCommandRequest) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return DeviceCommandRequestExists(ctx, exec, o.ID)
}
