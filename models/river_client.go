// Code generated by SQLBoiler 4.18.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/sqlboiler/v4/types"
	"github.com/volatiletech/strmangle"
)

// RiverClient is an object representing the database table.
type RiverClient struct {
	ID        string     `boil:"id" json:"id" toml:"id" yaml:"id"`
	CreatedAt time.Time  `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	Metadata  types.JSON `boil:"metadata" json:"metadata" toml:"metadata" yaml:"metadata"`
	PausedAt  null.Time  `boil:"paused_at" json:"paused_at,omitempty" toml:"paused_at" yaml:"paused_at,omitempty"`
	UpdatedAt time.Time  `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`

	R *riverClientR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L riverClientL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var RiverClientColumns = struct {
	ID        string
	CreatedAt string
	Metadata  string
	PausedAt  string
	UpdatedAt string
}{
	ID:        "id",
	CreatedAt: "created_at",
	Metadata:  "metadata",
	PausedAt:  "paused_at",
	UpdatedAt: "updated_at",
}

var RiverClientTableColumns = struct {
	ID        string
	CreatedAt string
	Metadata  string
	PausedAt  string
	UpdatedAt string
}{
	ID:        "river_client.id",
	CreatedAt: "river_client.created_at",
	Metadata:  "river_client.metadata",
	PausedAt:  "river_client.paused_at",
	UpdatedAt: "river_client.updated_at",
}

// Generated where

type whereHelperstring struct{ field string }

func (w whereHelperstring) EQ(x string) qm.QueryMod      { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperstring) NEQ(x string) qm.QueryMod     { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperstring) LT(x string) qm.QueryMod      { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperstring) LTE(x string) qm.QueryMod     { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperstring) GT(x string) qm.QueryMod      { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperstring) GTE(x string) qm.QueryMod     { return qmhelper.Where(w.field, qmhelper.GTE, x) }
func (w whereHelperstring) LIKE(x string) qm.QueryMod    { return qm.Where(w.field+" LIKE ?", x) }
func (w whereHelperstring) NLIKE(x string) qm.QueryMod   { return qm.Where(w.field+" NOT LIKE ?", x) }
func (w whereHelperstring) ILIKE(x string) qm.QueryMod   { return qm.Where(w.field+" ILIKE ?", x) }
func (w whereHelperstring) NILIKE(x string) qm.QueryMod  { return qm.Where(w.field+" NOT ILIKE ?", x) }
func (w whereHelperstring) SIMILAR(x string) qm.QueryMod { return qm.Where(w.field+" SIMILAR TO ?", x) }
func (w whereHelperstring) NSIMILAR(x string) qm.QueryMod {
	return qm.Where(w.field+" NOT SIMILAR TO ?", x)
}
func (w whereHelperstring) IN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelperstring) NIN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

type whereHelpertime_Time struct{ field string }

func (w whereHelpertime_Time) EQ(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.EQ, x)
}
func (w whereHelpertime_Time) NEQ(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.NEQ, x)
}
func (w whereHelpertime_Time) LT(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpertime_Time) LTE(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpertime_Time) GT(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpertime_Time) GTE(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

type whereHelpertypes_JSON struct{ field string }

func (w whereHelpertypes_JSON) EQ(x types.JSON) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.EQ, x)
}
func (w whereHelpertypes_JSON) NEQ(x types.JSON) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.NEQ, x)
}
func (w whereHelpertypes_JSON) LT(x types.JSON) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpertypes_JSON) LTE(x types.JSON) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpertypes_JSON) GT(x types.JSON) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpertypes_JSON) GTE(x types.JSON) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

type whereHelpernull_Time struct{ field string }

func (w whereHelpernull_Time) EQ(x null.Time) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_Time) NEQ(x null.Time) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_Time) LT(x null.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_Time) LTE(x null.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_Time) GT(x null.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_Time) GTE(x null.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

func (w whereHelpernull_Time) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_Time) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }

var RiverClientWhere = struct {
	ID        whereHelperstring
	CreatedAt whereHelpertime_Time
	Metadata  whereHelpertypes_JSON
	PausedAt  whereHelpernull_Time
	UpdatedAt whereHelpertime_Time
}{
	ID:        whereHelperstring{field: "\"tesla_oracle\".\"river_client\".\"id\""},
	CreatedAt: whereHelpertime_Time{field: "\"tesla_oracle\".\"river_client\".\"created_at\""},
	Metadata:  whereHelpertypes_JSON{field: "\"tesla_oracle\".\"river_client\".\"metadata\""},
	PausedAt:  whereHelpernull_Time{field: "\"tesla_oracle\".\"river_client\".\"paused_at\""},
	UpdatedAt: whereHelpertime_Time{field: "\"tesla_oracle\".\"river_client\".\"updated_at\""},
}

// RiverClientRels is where relationship names are stored.
var RiverClientRels = struct {
	RiverClientQueues string
}{
	RiverClientQueues: "RiverClientQueues",
}

// riverClientR is where relationships are stored.
type riverClientR struct {
	RiverClientQueues RiverClientQueueSlice `boil:"RiverClientQueues" json:"RiverClientQueues" toml:"RiverClientQueues" yaml:"RiverClientQueues"`
}

// NewStruct creates a new relationship struct
func (*riverClientR) NewStruct() *riverClientR {
	return &riverClientR{}
}

func (r *riverClientR) GetRiverClientQueues() RiverClientQueueSlice {
	if r == nil {
		return nil
	}
	return r.RiverClientQueues
}

// riverClientL is where Load methods for each relationship are stored.
type riverClientL struct{}

var (
	riverClientAllColumns            = []string{"id", "created_at", "metadata", "paused_at", "updated_at"}
	riverClientColumnsWithoutDefault = []string{"id", "updated_at"}
	riverClientColumnsWithDefault    = []string{"created_at", "metadata", "paused_at"}
	riverClientPrimaryKeyColumns     = []string{"id"}
	riverClientGeneratedColumns      = []string{}
)

type (
	// RiverClientSlice is an alias for a slice of pointers to RiverClient.
	// This should almost always be used instead of []RiverClient.
	RiverClientSlice []*RiverClient
	// RiverClientHook is the signature for custom RiverClient hook methods
	RiverClientHook func(context.Context, boil.ContextExecutor, *RiverClient) error

	riverClientQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	riverClientType                 = reflect.TypeOf(&RiverClient{})
	riverClientMapping              = queries.MakeStructMapping(riverClientType)
	riverClientPrimaryKeyMapping, _ = queries.BindMapping(riverClientType, riverClientMapping, riverClientPrimaryKeyColumns)
	riverClientInsertCacheMut       sync.RWMutex
	riverClientInsertCache          = make(map[string]insertCache)
	riverClientUpdateCacheMut       sync.RWMutex
	riverClientUpdateCache          = make(map[string]updateCache)
	riverClientUpsertCacheMut       sync.RWMutex
	riverClientUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var riverClientAfterSelectMu sync.Mutex
var riverClientAfterSelectHooks []RiverClientHook

var riverClientBeforeInsertMu sync.Mutex
var riverClientBeforeInsertHooks []RiverClientHook
var riverClientAfterInsertMu sync.Mutex
var riverClientAfterInsertHooks []RiverClientHook

var riverClientBeforeUpdateMu sync.Mutex
var riverClientBeforeUpdateHooks []RiverClientHook
var riverClientAfterUpdateMu sync.Mutex
var riverClientAfterUpdateHooks []RiverClientHook

var riverClientBeforeDeleteMu sync.Mutex
var riverClientBeforeDeleteHooks []RiverClientHook
var riverClientAfterDeleteMu sync.Mutex
var riverClientAfterDeleteHooks []RiverClientHook

var riverClientBeforeUpsertMu sync.Mutex
var riverClientBeforeUpsertHooks []RiverClientHook
var riverClientAfterUpsertMu sync.Mutex
var riverClientAfterUpsertHooks []RiverClientHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *RiverClient) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range riverClientAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *RiverClient) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range riverClientBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *RiverClient) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range riverClientAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *RiverClient) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range riverClientBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *RiverClient) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range riverClientAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *RiverClient) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range riverClientBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *RiverClient) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range riverClientAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *RiverClient) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range riverClientBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *RiverClient) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range riverClientAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddRiverClientHook registers your hook function for all future operations.
func AddRiverClientHook(hookPoint boil.HookPoint, riverClientHook RiverClientHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		riverClientAfterSelectMu.Lock()
		riverClientAfterSelectHooks = append(riverClientAfterSelectHooks, riverClientHook)
		riverClientAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		riverClientBeforeInsertMu.Lock()
		riverClientBeforeInsertHooks = append(riverClientBeforeInsertHooks, riverClientHook)
		riverClientBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		riverClientAfterInsertMu.Lock()
		riverClientAfterInsertHooks = append(riverClientAfterInsertHooks, riverClientHook)
		riverClientAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		riverClientBeforeUpdateMu.Lock()
		riverClientBeforeUpdateHooks = append(riverClientBeforeUpdateHooks, riverClientHook)
		riverClientBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		riverClientAfterUpdateMu.Lock()
		riverClientAfterUpdateHooks = append(riverClientAfterUpdateHooks, riverClientHook)
		riverClientAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		riverClientBeforeDeleteMu.Lock()
		riverClientBeforeDeleteHooks = append(riverClientBeforeDeleteHooks, riverClientHook)
		riverClientBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		riverClientAfterDeleteMu.Lock()
		riverClientAfterDeleteHooks = append(riverClientAfterDeleteHooks, riverClientHook)
		riverClientAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		riverClientBeforeUpsertMu.Lock()
		riverClientBeforeUpsertHooks = append(riverClientBeforeUpsertHooks, riverClientHook)
		riverClientBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		riverClientAfterUpsertMu.Lock()
		riverClientAfterUpsertHooks = append(riverClientAfterUpsertHooks, riverClientHook)
		riverClientAfterUpsertMu.Unlock()
	}
}

// One returns a single riverClient record from the query.
func (q riverClientQuery) One(ctx context.Context, exec boil.ContextExecutor) (*RiverClient, error) {
	o := &RiverClient{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for river_client")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all RiverClient records from the query.
func (q riverClientQuery) All(ctx context.Context, exec boil.ContextExecutor) (RiverClientSlice, error) {
	var o []*RiverClient

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to RiverClient slice")
	}

	if len(riverClientAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all RiverClient records in the query.
func (q riverClientQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count river_client rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q riverClientQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if river_client exists")
	}

	return count > 0, nil
}

// RiverClientQueues retrieves all the river_client_queue's RiverClientQueues with an executor.
func (o *RiverClient) RiverClientQueues(mods ...qm.QueryMod) riverClientQueueQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"tesla_oracle\".\"river_client_queue\".\"river_client_id\"=?", o.ID),
	)

	return RiverClientQueues(queryMods...)
}

// LoadRiverClientQueues allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (riverClientL) LoadRiverClientQueues(ctx context.Context, e boil.ContextExecutor, singular bool, maybeRiverClient interface{}, mods queries.Applicator) error {
	var slice []*RiverClient
	var object *RiverClient

	if singular {
		var ok bool
		object, ok = maybeRiverClient.(*RiverClient)
		if !ok {
			object = new(RiverClient)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeRiverClient)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeRiverClient))
			}
		}
	} else {
		s, ok := maybeRiverClient.(*[]*RiverClient)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeRiverClient)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeRiverClient))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &riverClientR{}
		}
		args[object.ID] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &riverClientR{}
			}
			args[obj.ID] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`tesla_oracle.river_client_queue`),
		qm.WhereIn(`tesla_oracle.river_client_queue.river_client_id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load river_client_queue")
	}

	var resultSlice []*RiverClientQueue
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice river_client_queue")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on river_client_queue")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for river_client_queue")
	}

	if len(riverClientQueueAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.RiverClientQueues = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &riverClientQueueR{}
			}
			foreign.R.RiverClient = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.RiverClientID {
				local.R.RiverClientQueues = append(local.R.RiverClientQueues, foreign)
				if foreign.R == nil {
					foreign.R = &riverClientQueueR{}
				}
				foreign.R.RiverClient = local
				break
			}
		}
	}

	return nil
}

// AddRiverClientQueues adds the given related objects to the existing relationships
// of the river_client, optionally inserting them as new records.
// Appends related to o.R.RiverClientQueues.
// Sets related.R.RiverClient appropriately.
func (o *RiverClient) AddRiverClientQueues(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*RiverClientQueue) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.RiverClientID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"tesla_oracle\".\"river_client_queue\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"river_client_id"}),
				strmangle.WhereClause("\"", "\"", 2, riverClientQueuePrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.RiverClientID, rel.Name}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.RiverClientID = o.ID
		}
	}

	if o.R == nil {
		o.R = &riverClientR{
			RiverClientQueues: related,
		}
	} else {
		o.R.RiverClientQueues = append(o.R.RiverClientQueues, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &riverClientQueueR{
				RiverClient: o,
			}
		} else {
			rel.R.RiverClient = o
		}
	}
	return nil
}

// RiverClients retrieves all the records using an executor.
func RiverClients(mods ...qm.QueryMod) riverClientQuery {
	mods = append(mods, qm.From("\"tesla_oracle\".\"river_client\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"tesla_oracle\".\"river_client\".*"})
	}

	return riverClientQuery{q}
}

// FindRiverClient retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindRiverClient(ctx context.Context, exec boil.ContextExecutor, iD string, selectCols ...string) (*RiverClient, error) {
	riverClientObj := &RiverClient{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"tesla_oracle\".\"river_client\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, riverClientObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from river_client")
	}

	if err = riverClientObj.doAfterSelectHooks(ctx, exec); err != nil {
		return riverClientObj, err
	}

	return riverClientObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *RiverClient) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no river_client provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		if o.UpdatedAt.IsZero() {
			o.UpdatedAt = currTime
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(riverClientColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	riverClientInsertCacheMut.RLock()
	cache, cached := riverClientInsertCache[key]
	riverClientInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			riverClientAllColumns,
			riverClientColumnsWithDefault,
			riverClientColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(riverClientType, riverClientMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(riverClientType, riverClientMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"tesla_oracle\".\"river_client\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"tesla_oracle\".\"river_client\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into river_client")
	}

	if !cached {
		riverClientInsertCacheMut.Lock()
		riverClientInsertCache[key] = cache
		riverClientInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the RiverClient.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *RiverClient) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		o.UpdatedAt = currTime
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	riverClientUpdateCacheMut.RLock()
	cache, cached := riverClientUpdateCache[key]
	riverClientUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			riverClientAllColumns,
			riverClientPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update river_client, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"tesla_oracle\".\"river_client\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, riverClientPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(riverClientType, riverClientMapping, append(wl, riverClientPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update river_client row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for river_client")
	}

	if !cached {
		riverClientUpdateCacheMut.Lock()
		riverClientUpdateCache[key] = cache
		riverClientUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q riverClientQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for river_client")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for river_client")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o RiverClientSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), riverClientPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"tesla_oracle\".\"river_client\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, riverClientPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in riverClient slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all riverClient")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *RiverClient) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("models: no river_client provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		o.UpdatedAt = currTime
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(riverClientColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	riverClientUpsertCacheMut.RLock()
	cache, cached := riverClientUpsertCache[key]
	riverClientUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			riverClientAllColumns,
			riverClientColumnsWithDefault,
			riverClientColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			riverClientAllColumns,
			riverClientPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert river_client, could not build update column list")
		}

		ret := strmangle.SetComplement(riverClientAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(riverClientPrimaryKeyColumns) == 0 {
				return errors.New("models: unable to upsert river_client, could not build conflict column list")
			}

			conflict = make([]string, len(riverClientPrimaryKeyColumns))
			copy(conflict, riverClientPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"tesla_oracle\".\"river_client\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(riverClientType, riverClientMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(riverClientType, riverClientMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert river_client")
	}

	if !cached {
		riverClientUpsertCacheMut.Lock()
		riverClientUpsertCache[key] = cache
		riverClientUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single RiverClient record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *RiverClient) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no RiverClient provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), riverClientPrimaryKeyMapping)
	sql := "DELETE FROM \"tesla_oracle\".\"river_client\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from river_client")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for river_client")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q riverClientQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no riverClientQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from river_client")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for river_client")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o RiverClientSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(riverClientBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), riverClientPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"tesla_oracle\".\"river_client\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, riverClientPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from riverClient slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for river_client")
	}

	if len(riverClientAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *RiverClient) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindRiverClient(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *RiverClientSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := RiverClientSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), riverClientPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"tesla_oracle\".\"river_client\".* FROM \"tesla_oracle\".\"river_client\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, riverClientPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in RiverClientSlice")
	}

	*o = slice

	return nil
}

// RiverClientExists checks if the RiverClient row exists.
func RiverClientExists(ctx context.Context, exec boil.ContextExecutor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"tesla_oracle\".\"river_client\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if river_client exists")
	}

	return exists, nil
}

// Exists checks if the RiverClient row exists.
func (o *RiverClient) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return RiverClientExists(ctx, exec, o.ID)
}
