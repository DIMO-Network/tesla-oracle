// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// Onboarding is an object representing the database table.
type Onboarding struct {
	Vin                string      `boil:"vin" json:"vin" toml:"vin" yaml:"vin"`
	VehicleTokenID     null.Int64  `boil:"vehicle_token_id" json:"vehicle_token_id,omitempty" toml:"vehicle_token_id" yaml:"vehicle_token_id,omitempty"`
	SyntheticTokenID   null.Int64  `boil:"synthetic_token_id" json:"synthetic_token_id,omitempty" toml:"synthetic_token_id" yaml:"synthetic_token_id,omitempty"`
	ExternalID         null.String `boil:"external_id" json:"external_id,omitempty" toml:"external_id" yaml:"external_id,omitempty"`
	OnboardingStatus   int         `boil:"onboarding_status" json:"onboarding_status" toml:"onboarding_status" yaml:"onboarding_status"`
	DeviceDefinitionID null.String `boil:"device_definition_id" json:"device_definition_id,omitempty" toml:"device_definition_id" yaml:"device_definition_id,omitempty"`
	WalletIndex        null.Int64  `boil:"wallet_index" json:"wallet_index,omitempty" toml:"wallet_index" yaml:"wallet_index,omitempty"`

	R *onboardingR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L onboardingL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var OnboardingColumns = struct {
	Vin                string
	VehicleTokenID     string
	SyntheticTokenID   string
	ExternalID         string
	OnboardingStatus   string
	DeviceDefinitionID string
	WalletIndex        string
}{
	Vin:                "vin",
	VehicleTokenID:     "vehicle_token_id",
	SyntheticTokenID:   "synthetic_token_id",
	ExternalID:         "external_id",
	OnboardingStatus:   "onboarding_status",
	DeviceDefinitionID: "device_definition_id",
	WalletIndex:        "wallet_index",
}

var OnboardingTableColumns = struct {
	Vin                string
	VehicleTokenID     string
	SyntheticTokenID   string
	ExternalID         string
	OnboardingStatus   string
	DeviceDefinitionID string
	WalletIndex        string
}{
	Vin:                "onboarding.vin",
	VehicleTokenID:     "onboarding.vehicle_token_id",
	SyntheticTokenID:   "onboarding.synthetic_token_id",
	ExternalID:         "onboarding.external_id",
	OnboardingStatus:   "onboarding.onboarding_status",
	DeviceDefinitionID: "onboarding.device_definition_id",
	WalletIndex:        "onboarding.wallet_index",
}

// Generated where

type whereHelperstring struct{ field string }

func (w whereHelperstring) EQ(x string) qm.QueryMod     { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperstring) NEQ(x string) qm.QueryMod    { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperstring) LT(x string) qm.QueryMod     { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperstring) LTE(x string) qm.QueryMod    { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperstring) GT(x string) qm.QueryMod     { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperstring) GTE(x string) qm.QueryMod    { return qmhelper.Where(w.field, qmhelper.GTE, x) }
func (w whereHelperstring) LIKE(x string) qm.QueryMod   { return qm.Where(w.field+" LIKE ?", x) }
func (w whereHelperstring) NLIKE(x string) qm.QueryMod  { return qm.Where(w.field+" NOT LIKE ?", x) }
func (w whereHelperstring) ILIKE(x string) qm.QueryMod  { return qm.Where(w.field+" ILIKE ?", x) }
func (w whereHelperstring) NILIKE(x string) qm.QueryMod { return qm.Where(w.field+" NOT ILIKE ?", x) }
func (w whereHelperstring) IN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelperstring) NIN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

type whereHelpernull_Int64 struct{ field string }

func (w whereHelpernull_Int64) EQ(x null.Int64) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_Int64) NEQ(x null.Int64) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_Int64) LT(x null.Int64) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_Int64) LTE(x null.Int64) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_Int64) GT(x null.Int64) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_Int64) GTE(x null.Int64) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}
func (w whereHelpernull_Int64) IN(slice []int64) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelpernull_Int64) NIN(slice []int64) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

func (w whereHelpernull_Int64) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_Int64) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }

type whereHelpernull_String struct{ field string }

func (w whereHelpernull_String) EQ(x null.String) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_String) NEQ(x null.String) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_String) LT(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_String) LTE(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_String) GT(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_String) GTE(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}
func (w whereHelpernull_String) LIKE(x null.String) qm.QueryMod {
	return qm.Where(w.field+" LIKE ?", x)
}
func (w whereHelpernull_String) NLIKE(x null.String) qm.QueryMod {
	return qm.Where(w.field+" NOT LIKE ?", x)
}
func (w whereHelpernull_String) ILIKE(x null.String) qm.QueryMod {
	return qm.Where(w.field+" ILIKE ?", x)
}
func (w whereHelpernull_String) NILIKE(x null.String) qm.QueryMod {
	return qm.Where(w.field+" NOT ILIKE ?", x)
}
func (w whereHelpernull_String) IN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelpernull_String) NIN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

func (w whereHelpernull_String) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_String) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }

type whereHelperint struct{ field string }

func (w whereHelperint) EQ(x int) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperint) NEQ(x int) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperint) LT(x int) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperint) LTE(x int) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperint) GT(x int) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperint) GTE(x int) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }
func (w whereHelperint) IN(slice []int) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelperint) NIN(slice []int) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

var OnboardingWhere = struct {
	Vin                whereHelperstring
	VehicleTokenID     whereHelpernull_Int64
	SyntheticTokenID   whereHelpernull_Int64
	ExternalID         whereHelpernull_String
	OnboardingStatus   whereHelperint
	DeviceDefinitionID whereHelpernull_String
	WalletIndex        whereHelpernull_Int64
}{
	Vin:                whereHelperstring{field: "\"tesla_oracle\".\"onboarding\".\"vin\""},
	VehicleTokenID:     whereHelpernull_Int64{field: "\"tesla_oracle\".\"onboarding\".\"vehicle_token_id\""},
	SyntheticTokenID:   whereHelpernull_Int64{field: "\"tesla_oracle\".\"onboarding\".\"synthetic_token_id\""},
	ExternalID:         whereHelpernull_String{field: "\"tesla_oracle\".\"onboarding\".\"external_id\""},
	OnboardingStatus:   whereHelperint{field: "\"tesla_oracle\".\"onboarding\".\"onboarding_status\""},
	DeviceDefinitionID: whereHelpernull_String{field: "\"tesla_oracle\".\"onboarding\".\"device_definition_id\""},
	WalletIndex:        whereHelpernull_Int64{field: "\"tesla_oracle\".\"onboarding\".\"wallet_index\""},
}

// OnboardingRels is where relationship names are stored.
var OnboardingRels = struct {
}{}

// onboardingR is where relationships are stored.
type onboardingR struct {
}

// NewStruct creates a new relationship struct
func (*onboardingR) NewStruct() *onboardingR {
	return &onboardingR{}
}

// onboardingL is where Load methods for each relationship are stored.
type onboardingL struct{}

var (
	onboardingAllColumns            = []string{"vin", "vehicle_token_id", "synthetic_token_id", "external_id", "onboarding_status", "device_definition_id", "wallet_index"}
	onboardingColumnsWithoutDefault = []string{"vin"}
	onboardingColumnsWithDefault    = []string{"vehicle_token_id", "synthetic_token_id", "external_id", "onboarding_status", "device_definition_id", "wallet_index"}
	onboardingPrimaryKeyColumns     = []string{"vin"}
	onboardingGeneratedColumns      = []string{}
)

type (
	// OnboardingSlice is an alias for a slice of pointers to Onboarding.
	// This should almost always be used instead of []Onboarding.
	OnboardingSlice []*Onboarding
	// OnboardingHook is the signature for custom Onboarding hook methods
	OnboardingHook func(context.Context, boil.ContextExecutor, *Onboarding) error

	onboardingQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	onboardingType                 = reflect.TypeOf(&Onboarding{})
	onboardingMapping              = queries.MakeStructMapping(onboardingType)
	onboardingPrimaryKeyMapping, _ = queries.BindMapping(onboardingType, onboardingMapping, onboardingPrimaryKeyColumns)
	onboardingInsertCacheMut       sync.RWMutex
	onboardingInsertCache          = make(map[string]insertCache)
	onboardingUpdateCacheMut       sync.RWMutex
	onboardingUpdateCache          = make(map[string]updateCache)
	onboardingUpsertCacheMut       sync.RWMutex
	onboardingUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var onboardingAfterSelectMu sync.Mutex
var onboardingAfterSelectHooks []OnboardingHook

var onboardingBeforeInsertMu sync.Mutex
var onboardingBeforeInsertHooks []OnboardingHook
var onboardingAfterInsertMu sync.Mutex
var onboardingAfterInsertHooks []OnboardingHook

var onboardingBeforeUpdateMu sync.Mutex
var onboardingBeforeUpdateHooks []OnboardingHook
var onboardingAfterUpdateMu sync.Mutex
var onboardingAfterUpdateHooks []OnboardingHook

var onboardingBeforeDeleteMu sync.Mutex
var onboardingBeforeDeleteHooks []OnboardingHook
var onboardingAfterDeleteMu sync.Mutex
var onboardingAfterDeleteHooks []OnboardingHook

var onboardingBeforeUpsertMu sync.Mutex
var onboardingBeforeUpsertHooks []OnboardingHook
var onboardingAfterUpsertMu sync.Mutex
var onboardingAfterUpsertHooks []OnboardingHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Onboarding) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range onboardingAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Onboarding) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range onboardingBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Onboarding) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range onboardingAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Onboarding) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range onboardingBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Onboarding) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range onboardingAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Onboarding) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range onboardingBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Onboarding) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range onboardingAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Onboarding) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range onboardingBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Onboarding) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range onboardingAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddOnboardingHook registers your hook function for all future operations.
func AddOnboardingHook(hookPoint boil.HookPoint, onboardingHook OnboardingHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		onboardingAfterSelectMu.Lock()
		onboardingAfterSelectHooks = append(onboardingAfterSelectHooks, onboardingHook)
		onboardingAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		onboardingBeforeInsertMu.Lock()
		onboardingBeforeInsertHooks = append(onboardingBeforeInsertHooks, onboardingHook)
		onboardingBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		onboardingAfterInsertMu.Lock()
		onboardingAfterInsertHooks = append(onboardingAfterInsertHooks, onboardingHook)
		onboardingAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		onboardingBeforeUpdateMu.Lock()
		onboardingBeforeUpdateHooks = append(onboardingBeforeUpdateHooks, onboardingHook)
		onboardingBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		onboardingAfterUpdateMu.Lock()
		onboardingAfterUpdateHooks = append(onboardingAfterUpdateHooks, onboardingHook)
		onboardingAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		onboardingBeforeDeleteMu.Lock()
		onboardingBeforeDeleteHooks = append(onboardingBeforeDeleteHooks, onboardingHook)
		onboardingBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		onboardingAfterDeleteMu.Lock()
		onboardingAfterDeleteHooks = append(onboardingAfterDeleteHooks, onboardingHook)
		onboardingAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		onboardingBeforeUpsertMu.Lock()
		onboardingBeforeUpsertHooks = append(onboardingBeforeUpsertHooks, onboardingHook)
		onboardingBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		onboardingAfterUpsertMu.Lock()
		onboardingAfterUpsertHooks = append(onboardingAfterUpsertHooks, onboardingHook)
		onboardingAfterUpsertMu.Unlock()
	}
}

// One returns a single onboarding record from the query.
func (q onboardingQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Onboarding, error) {
	o := &Onboarding{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for onboarding")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all Onboarding records from the query.
func (q onboardingQuery) All(ctx context.Context, exec boil.ContextExecutor) (OnboardingSlice, error) {
	var o []*Onboarding

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to Onboarding slice")
	}

	if len(onboardingAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all Onboarding records in the query.
func (q onboardingQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count onboarding rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q onboardingQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if onboarding exists")
	}

	return count > 0, nil
}

// Onboardings retrieves all the records using an executor.
func Onboardings(mods ...qm.QueryMod) onboardingQuery {
	mods = append(mods, qm.From("\"tesla_oracle\".\"onboarding\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"tesla_oracle\".\"onboarding\".*"})
	}

	return onboardingQuery{q}
}

// FindOnboarding retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindOnboarding(ctx context.Context, exec boil.ContextExecutor, vin string, selectCols ...string) (*Onboarding, error) {
	onboardingObj := &Onboarding{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"tesla_oracle\".\"onboarding\" where \"vin\"=$1", sel,
	)

	q := queries.Raw(query, vin)

	err := q.Bind(ctx, exec, onboardingObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from onboarding")
	}

	if err = onboardingObj.doAfterSelectHooks(ctx, exec); err != nil {
		return onboardingObj, err
	}

	return onboardingObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Onboarding) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no onboarding provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(onboardingColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	onboardingInsertCacheMut.RLock()
	cache, cached := onboardingInsertCache[key]
	onboardingInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			onboardingAllColumns,
			onboardingColumnsWithDefault,
			onboardingColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(onboardingType, onboardingMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(onboardingType, onboardingMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"tesla_oracle\".\"onboarding\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"tesla_oracle\".\"onboarding\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into onboarding")
	}

	if !cached {
		onboardingInsertCacheMut.Lock()
		onboardingInsertCache[key] = cache
		onboardingInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the Onboarding.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Onboarding) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	onboardingUpdateCacheMut.RLock()
	cache, cached := onboardingUpdateCache[key]
	onboardingUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			onboardingAllColumns,
			onboardingPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update onboarding, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"tesla_oracle\".\"onboarding\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, onboardingPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(onboardingType, onboardingMapping, append(wl, onboardingPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update onboarding row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for onboarding")
	}

	if !cached {
		onboardingUpdateCacheMut.Lock()
		onboardingUpdateCache[key] = cache
		onboardingUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q onboardingQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for onboarding")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for onboarding")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o OnboardingSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), onboardingPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"tesla_oracle\".\"onboarding\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, onboardingPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in onboarding slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all onboarding")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Onboarding) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("models: no onboarding provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(onboardingColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	onboardingUpsertCacheMut.RLock()
	cache, cached := onboardingUpsertCache[key]
	onboardingUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			onboardingAllColumns,
			onboardingColumnsWithDefault,
			onboardingColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			onboardingAllColumns,
			onboardingPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert onboarding, could not build update column list")
		}

		ret := strmangle.SetComplement(onboardingAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(onboardingPrimaryKeyColumns) == 0 {
				return errors.New("models: unable to upsert onboarding, could not build conflict column list")
			}

			conflict = make([]string, len(onboardingPrimaryKeyColumns))
			copy(conflict, onboardingPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"tesla_oracle\".\"onboarding\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(onboardingType, onboardingMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(onboardingType, onboardingMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert onboarding")
	}

	if !cached {
		onboardingUpsertCacheMut.Lock()
		onboardingUpsertCache[key] = cache
		onboardingUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single Onboarding record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Onboarding) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no Onboarding provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), onboardingPrimaryKeyMapping)
	sql := "DELETE FROM \"tesla_oracle\".\"onboarding\" WHERE \"vin\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from onboarding")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for onboarding")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q onboardingQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no onboardingQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from onboarding")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for onboarding")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o OnboardingSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(onboardingBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), onboardingPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"tesla_oracle\".\"onboarding\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, onboardingPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from onboarding slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for onboarding")
	}

	if len(onboardingAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Onboarding) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindOnboarding(ctx, exec, o.Vin)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *OnboardingSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := OnboardingSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), onboardingPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"tesla_oracle\".\"onboarding\".* FROM \"tesla_oracle\".\"onboarding\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, onboardingPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in OnboardingSlice")
	}

	*o = slice

	return nil
}

// OnboardingExists checks if the Onboarding row exists.
func OnboardingExists(ctx context.Context, exec boil.ContextExecutor, vin string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"tesla_oracle\".\"onboarding\" where \"vin\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, vin)
	}
	row := exec.QueryRowContext(ctx, sql, vin)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if onboarding exists")
	}

	return exists, nil
}

// Exists checks if the Onboarding row exists.
func (o *Onboarding) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return OnboardingExists(ctx, exec, o.Vin)
}
