// Code generated by SQLBoiler 4.18.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// SyntheticDevice is an object representing the database table.
type SyntheticDevice struct {
	Address            []byte      `boil:"address" json:"address" toml:"address" yaml:"address"`
	Vin                string      `boil:"vin" json:"vin" toml:"vin" yaml:"vin"`
	WalletChildNumber  int         `boil:"wallet_child_number" json:"wallet_child_number" toml:"wallet_child_number" yaml:"wallet_child_number"`
	VehicleTokenID     null.Int    `boil:"vehicle_token_id" json:"vehicle_token_id,omitempty" toml:"vehicle_token_id" yaml:"vehicle_token_id,omitempty"`
	TokenID            null.Int    `boil:"token_id" json:"token_id,omitempty" toml:"token_id" yaml:"token_id,omitempty"`
	AccessToken        string      `boil:"access_token" json:"access_token" toml:"access_token" yaml:"access_token"`
	AccessExpiresAt    time.Time   `boil:"access_expires_at" json:"access_expires_at" toml:"access_expires_at" yaml:"access_expires_at"`
	RefreshToken       string      `boil:"refresh_token" json:"refresh_token" toml:"refresh_token" yaml:"refresh_token"`
	RefreshExpiresAt   time.Time   `boil:"refresh_expires_at" json:"refresh_expires_at" toml:"refresh_expires_at" yaml:"refresh_expires_at"`
	SubscriptionStatus null.String `boil:"subscription_status" json:"subscription_status,omitempty" toml:"subscription_status" yaml:"subscription_status,omitempty"`

	R *syntheticDeviceR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L syntheticDeviceL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var SyntheticDeviceColumns = struct {
	Address            string
	Vin                string
	WalletChildNumber  string
	VehicleTokenID     string
	TokenID            string
	AccessToken        string
	AccessExpiresAt    string
	RefreshToken       string
	RefreshExpiresAt   string
	SubscriptionStatus string
}{
	Address:            "address",
	Vin:                "vin",
	WalletChildNumber:  "wallet_child_number",
	VehicleTokenID:     "vehicle_token_id",
	TokenID:            "token_id",
	AccessToken:        "access_token",
	AccessExpiresAt:    "access_expires_at",
	RefreshToken:       "refresh_token",
	RefreshExpiresAt:   "refresh_expires_at",
	SubscriptionStatus: "subscription_status",
}

var SyntheticDeviceTableColumns = struct {
	Address            string
	Vin                string
	WalletChildNumber  string
	VehicleTokenID     string
	TokenID            string
	AccessToken        string
	AccessExpiresAt    string
	RefreshToken       string
	RefreshExpiresAt   string
	SubscriptionStatus string
}{
	Address:            "synthetic_devices.address",
	Vin:                "synthetic_devices.vin",
	WalletChildNumber:  "synthetic_devices.wallet_child_number",
	VehicleTokenID:     "synthetic_devices.vehicle_token_id",
	TokenID:            "synthetic_devices.token_id",
	AccessToken:        "synthetic_devices.access_token",
	AccessExpiresAt:    "synthetic_devices.access_expires_at",
	RefreshToken:       "synthetic_devices.refresh_token",
	RefreshExpiresAt:   "synthetic_devices.refresh_expires_at",
	SubscriptionStatus: "synthetic_devices.subscription_status",
}

// Generated where

type whereHelper__byte struct{ field string }

func (w whereHelper__byte) EQ(x []byte) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelper__byte) NEQ(x []byte) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelper__byte) LT(x []byte) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelper__byte) LTE(x []byte) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelper__byte) GT(x []byte) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelper__byte) GTE(x []byte) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }

type whereHelperint struct{ field string }

func (w whereHelperint) EQ(x int) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperint) NEQ(x int) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperint) LT(x int) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperint) LTE(x int) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperint) GT(x int) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperint) GTE(x int) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }
func (w whereHelperint) IN(slice []int) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelperint) NIN(slice []int) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

type whereHelpernull_Int struct{ field string }

func (w whereHelpernull_Int) EQ(x null.Int) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_Int) NEQ(x null.Int) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_Int) LT(x null.Int) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_Int) LTE(x null.Int) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_Int) GT(x null.Int) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_Int) GTE(x null.Int) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}
func (w whereHelpernull_Int) IN(slice []int) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelpernull_Int) NIN(slice []int) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

func (w whereHelpernull_Int) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_Int) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }

var SyntheticDeviceWhere = struct {
	Address            whereHelper__byte
	Vin                whereHelperstring
	WalletChildNumber  whereHelperint
	VehicleTokenID     whereHelpernull_Int
	TokenID            whereHelpernull_Int
	AccessToken        whereHelperstring
	AccessExpiresAt    whereHelpertime_Time
	RefreshToken       whereHelperstring
	RefreshExpiresAt   whereHelpertime_Time
	SubscriptionStatus whereHelpernull_String
}{
	Address:            whereHelper__byte{field: "\"tesla_oracle\".\"synthetic_devices\".\"address\""},
	Vin:                whereHelperstring{field: "\"tesla_oracle\".\"synthetic_devices\".\"vin\""},
	WalletChildNumber:  whereHelperint{field: "\"tesla_oracle\".\"synthetic_devices\".\"wallet_child_number\""},
	VehicleTokenID:     whereHelpernull_Int{field: "\"tesla_oracle\".\"synthetic_devices\".\"vehicle_token_id\""},
	TokenID:            whereHelpernull_Int{field: "\"tesla_oracle\".\"synthetic_devices\".\"token_id\""},
	AccessToken:        whereHelperstring{field: "\"tesla_oracle\".\"synthetic_devices\".\"access_token\""},
	AccessExpiresAt:    whereHelpertime_Time{field: "\"tesla_oracle\".\"synthetic_devices\".\"access_expires_at\""},
	RefreshToken:       whereHelperstring{field: "\"tesla_oracle\".\"synthetic_devices\".\"refresh_token\""},
	RefreshExpiresAt:   whereHelpertime_Time{field: "\"tesla_oracle\".\"synthetic_devices\".\"refresh_expires_at\""},
	SubscriptionStatus: whereHelpernull_String{field: "\"tesla_oracle\".\"synthetic_devices\".\"subscription_status\""},
}

// SyntheticDeviceRels is where relationship names are stored.
var SyntheticDeviceRels = struct {
}{}

// syntheticDeviceR is where relationships are stored.
type syntheticDeviceR struct {
}

// NewStruct creates a new relationship struct
func (*syntheticDeviceR) NewStruct() *syntheticDeviceR {
	return &syntheticDeviceR{}
}

// syntheticDeviceL is where Load methods for each relationship are stored.
type syntheticDeviceL struct{}

var (
	syntheticDeviceAllColumns            = []string{"address", "vin", "wallet_child_number", "vehicle_token_id", "token_id", "access_token", "access_expires_at", "refresh_token", "refresh_expires_at", "subscription_status"}
	syntheticDeviceColumnsWithoutDefault = []string{"address", "vin", "wallet_child_number", "access_token", "access_expires_at", "refresh_token", "refresh_expires_at"}
	syntheticDeviceColumnsWithDefault    = []string{"vehicle_token_id", "token_id", "subscription_status"}
	syntheticDevicePrimaryKeyColumns     = []string{"address"}
	syntheticDeviceGeneratedColumns      = []string{}
)

type (
	// SyntheticDeviceSlice is an alias for a slice of pointers to SyntheticDevice.
	// This should almost always be used instead of []SyntheticDevice.
	SyntheticDeviceSlice []*SyntheticDevice
	// SyntheticDeviceHook is the signature for custom SyntheticDevice hook methods
	SyntheticDeviceHook func(context.Context, boil.ContextExecutor, *SyntheticDevice) error

	syntheticDeviceQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	syntheticDeviceType                 = reflect.TypeOf(&SyntheticDevice{})
	syntheticDeviceMapping              = queries.MakeStructMapping(syntheticDeviceType)
	syntheticDevicePrimaryKeyMapping, _ = queries.BindMapping(syntheticDeviceType, syntheticDeviceMapping, syntheticDevicePrimaryKeyColumns)
	syntheticDeviceInsertCacheMut       sync.RWMutex
	syntheticDeviceInsertCache          = make(map[string]insertCache)
	syntheticDeviceUpdateCacheMut       sync.RWMutex
	syntheticDeviceUpdateCache          = make(map[string]updateCache)
	syntheticDeviceUpsertCacheMut       sync.RWMutex
	syntheticDeviceUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var syntheticDeviceAfterSelectMu sync.Mutex
var syntheticDeviceAfterSelectHooks []SyntheticDeviceHook

var syntheticDeviceBeforeInsertMu sync.Mutex
var syntheticDeviceBeforeInsertHooks []SyntheticDeviceHook
var syntheticDeviceAfterInsertMu sync.Mutex
var syntheticDeviceAfterInsertHooks []SyntheticDeviceHook

var syntheticDeviceBeforeUpdateMu sync.Mutex
var syntheticDeviceBeforeUpdateHooks []SyntheticDeviceHook
var syntheticDeviceAfterUpdateMu sync.Mutex
var syntheticDeviceAfterUpdateHooks []SyntheticDeviceHook

var syntheticDeviceBeforeDeleteMu sync.Mutex
var syntheticDeviceBeforeDeleteHooks []SyntheticDeviceHook
var syntheticDeviceAfterDeleteMu sync.Mutex
var syntheticDeviceAfterDeleteHooks []SyntheticDeviceHook

var syntheticDeviceBeforeUpsertMu sync.Mutex
var syntheticDeviceBeforeUpsertHooks []SyntheticDeviceHook
var syntheticDeviceAfterUpsertMu sync.Mutex
var syntheticDeviceAfterUpsertHooks []SyntheticDeviceHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *SyntheticDevice) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range syntheticDeviceAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *SyntheticDevice) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range syntheticDeviceBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *SyntheticDevice) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range syntheticDeviceAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *SyntheticDevice) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range syntheticDeviceBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *SyntheticDevice) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range syntheticDeviceAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *SyntheticDevice) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range syntheticDeviceBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *SyntheticDevice) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range syntheticDeviceAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *SyntheticDevice) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range syntheticDeviceBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *SyntheticDevice) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range syntheticDeviceAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddSyntheticDeviceHook registers your hook function for all future operations.
func AddSyntheticDeviceHook(hookPoint boil.HookPoint, syntheticDeviceHook SyntheticDeviceHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		syntheticDeviceAfterSelectMu.Lock()
		syntheticDeviceAfterSelectHooks = append(syntheticDeviceAfterSelectHooks, syntheticDeviceHook)
		syntheticDeviceAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		syntheticDeviceBeforeInsertMu.Lock()
		syntheticDeviceBeforeInsertHooks = append(syntheticDeviceBeforeInsertHooks, syntheticDeviceHook)
		syntheticDeviceBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		syntheticDeviceAfterInsertMu.Lock()
		syntheticDeviceAfterInsertHooks = append(syntheticDeviceAfterInsertHooks, syntheticDeviceHook)
		syntheticDeviceAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		syntheticDeviceBeforeUpdateMu.Lock()
		syntheticDeviceBeforeUpdateHooks = append(syntheticDeviceBeforeUpdateHooks, syntheticDeviceHook)
		syntheticDeviceBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		syntheticDeviceAfterUpdateMu.Lock()
		syntheticDeviceAfterUpdateHooks = append(syntheticDeviceAfterUpdateHooks, syntheticDeviceHook)
		syntheticDeviceAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		syntheticDeviceBeforeDeleteMu.Lock()
		syntheticDeviceBeforeDeleteHooks = append(syntheticDeviceBeforeDeleteHooks, syntheticDeviceHook)
		syntheticDeviceBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		syntheticDeviceAfterDeleteMu.Lock()
		syntheticDeviceAfterDeleteHooks = append(syntheticDeviceAfterDeleteHooks, syntheticDeviceHook)
		syntheticDeviceAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		syntheticDeviceBeforeUpsertMu.Lock()
		syntheticDeviceBeforeUpsertHooks = append(syntheticDeviceBeforeUpsertHooks, syntheticDeviceHook)
		syntheticDeviceBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		syntheticDeviceAfterUpsertMu.Lock()
		syntheticDeviceAfterUpsertHooks = append(syntheticDeviceAfterUpsertHooks, syntheticDeviceHook)
		syntheticDeviceAfterUpsertMu.Unlock()
	}
}

// One returns a single syntheticDevice record from the query.
func (q syntheticDeviceQuery) One(ctx context.Context, exec boil.ContextExecutor) (*SyntheticDevice, error) {
	o := &SyntheticDevice{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for synthetic_devices")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all SyntheticDevice records from the query.
func (q syntheticDeviceQuery) All(ctx context.Context, exec boil.ContextExecutor) (SyntheticDeviceSlice, error) {
	var o []*SyntheticDevice

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to SyntheticDevice slice")
	}

	if len(syntheticDeviceAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all SyntheticDevice records in the query.
func (q syntheticDeviceQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count synthetic_devices rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q syntheticDeviceQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if synthetic_devices exists")
	}

	return count > 0, nil
}

// SyntheticDevices retrieves all the records using an executor.
func SyntheticDevices(mods ...qm.QueryMod) syntheticDeviceQuery {
	mods = append(mods, qm.From("\"tesla_oracle\".\"synthetic_devices\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"tesla_oracle\".\"synthetic_devices\".*"})
	}

	return syntheticDeviceQuery{q}
}

// FindSyntheticDevice retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindSyntheticDevice(ctx context.Context, exec boil.ContextExecutor, address []byte, selectCols ...string) (*SyntheticDevice, error) {
	syntheticDeviceObj := &SyntheticDevice{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"tesla_oracle\".\"synthetic_devices\" where \"address\"=$1", sel,
	)

	q := queries.Raw(query, address)

	err := q.Bind(ctx, exec, syntheticDeviceObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from synthetic_devices")
	}

	if err = syntheticDeviceObj.doAfterSelectHooks(ctx, exec); err != nil {
		return syntheticDeviceObj, err
	}

	return syntheticDeviceObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *SyntheticDevice) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no synthetic_devices provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(syntheticDeviceColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	syntheticDeviceInsertCacheMut.RLock()
	cache, cached := syntheticDeviceInsertCache[key]
	syntheticDeviceInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			syntheticDeviceAllColumns,
			syntheticDeviceColumnsWithDefault,
			syntheticDeviceColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(syntheticDeviceType, syntheticDeviceMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(syntheticDeviceType, syntheticDeviceMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"tesla_oracle\".\"synthetic_devices\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"tesla_oracle\".\"synthetic_devices\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into synthetic_devices")
	}

	if !cached {
		syntheticDeviceInsertCacheMut.Lock()
		syntheticDeviceInsertCache[key] = cache
		syntheticDeviceInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the SyntheticDevice.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *SyntheticDevice) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	syntheticDeviceUpdateCacheMut.RLock()
	cache, cached := syntheticDeviceUpdateCache[key]
	syntheticDeviceUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			syntheticDeviceAllColumns,
			syntheticDevicePrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update synthetic_devices, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"tesla_oracle\".\"synthetic_devices\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, syntheticDevicePrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(syntheticDeviceType, syntheticDeviceMapping, append(wl, syntheticDevicePrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update synthetic_devices row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for synthetic_devices")
	}

	if !cached {
		syntheticDeviceUpdateCacheMut.Lock()
		syntheticDeviceUpdateCache[key] = cache
		syntheticDeviceUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q syntheticDeviceQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for synthetic_devices")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for synthetic_devices")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o SyntheticDeviceSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), syntheticDevicePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"tesla_oracle\".\"synthetic_devices\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, syntheticDevicePrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in syntheticDevice slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all syntheticDevice")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *SyntheticDevice) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("models: no synthetic_devices provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(syntheticDeviceColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	syntheticDeviceUpsertCacheMut.RLock()
	cache, cached := syntheticDeviceUpsertCache[key]
	syntheticDeviceUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			syntheticDeviceAllColumns,
			syntheticDeviceColumnsWithDefault,
			syntheticDeviceColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			syntheticDeviceAllColumns,
			syntheticDevicePrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert synthetic_devices, could not build update column list")
		}

		ret := strmangle.SetComplement(syntheticDeviceAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(syntheticDevicePrimaryKeyColumns) == 0 {
				return errors.New("models: unable to upsert synthetic_devices, could not build conflict column list")
			}

			conflict = make([]string, len(syntheticDevicePrimaryKeyColumns))
			copy(conflict, syntheticDevicePrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"tesla_oracle\".\"synthetic_devices\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(syntheticDeviceType, syntheticDeviceMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(syntheticDeviceType, syntheticDeviceMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert synthetic_devices")
	}

	if !cached {
		syntheticDeviceUpsertCacheMut.Lock()
		syntheticDeviceUpsertCache[key] = cache
		syntheticDeviceUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single SyntheticDevice record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *SyntheticDevice) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no SyntheticDevice provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), syntheticDevicePrimaryKeyMapping)
	sql := "DELETE FROM \"tesla_oracle\".\"synthetic_devices\" WHERE \"address\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from synthetic_devices")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for synthetic_devices")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q syntheticDeviceQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no syntheticDeviceQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from synthetic_devices")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for synthetic_devices")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o SyntheticDeviceSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(syntheticDeviceBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), syntheticDevicePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"tesla_oracle\".\"synthetic_devices\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, syntheticDevicePrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from syntheticDevice slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for synthetic_devices")
	}

	if len(syntheticDeviceAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *SyntheticDevice) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindSyntheticDevice(ctx, exec, o.Address)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *SyntheticDeviceSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := SyntheticDeviceSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), syntheticDevicePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"tesla_oracle\".\"synthetic_devices\".* FROM \"tesla_oracle\".\"synthetic_devices\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, syntheticDevicePrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in SyntheticDeviceSlice")
	}

	*o = slice

	return nil
}

// SyntheticDeviceExists checks if the SyntheticDevice row exists.
func SyntheticDeviceExists(ctx context.Context, exec boil.ContextExecutor, address []byte) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"tesla_oracle\".\"synthetic_devices\" where \"address\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, address)
	}
	row := exec.QueryRowContext(ctx, sql, address)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if synthetic_devices exists")
	}

	return exists, nil
}

// Exists checks if the SyntheticDevice row exists.
func (o *SyntheticDevice) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return SyntheticDeviceExists(ctx, exec, o.Address)
}
